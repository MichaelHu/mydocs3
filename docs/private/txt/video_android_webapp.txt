// namespace
;(function($) {

var app = {
    init: function() {
        new app.router.video();
        var navigate= Backbone.history.navigate,
            loadUrl= Backbone.history.loadUrl;
        
        Backbone.history.start();
        
  
       this.setShowimg(); 
       this.addPV(); 
       //this.addGoTop(); 
       this.activeEvent();
    
        
        window.addEventListener('load', function(e){
            setTimeout(function(){
             scrollTo(0, 1);
            }, 0); 
        });
    },
    
    addPV: function(){
            //页面统计  
        addEventListener('hashchange', function(e){
            $.sendPVStats();
        },false);
        //页面统计  
        addEventListener('pageshow', function(e){
            if(e.persisted)
                return false;
            $.sendPVStats();
        },false);
    },
    addGoTop: function(){
       //返回顶部 
        var ev =Backbone.Events;

        $('#gotopBtn').on('click', function(){
            scrollTo(0,1);
            $(this).css('visibility','hidden')
        }).igoTop(function(param){
            ev.trigger('scroll',param);
        });

    },
    
    activeEvent: function(){
        $('body').on('click',function(e){
            var el = e.target, $el, url,obj;
            el = el.tagName =="A" ? el : (function(){
                while(el = el.parentNode){
                    if(el.tagName =="A")
                        return el;
                }
                return null;
            })();
            if(el){
                
                $el=$(el);
                $el.addClass('active');
                $.later(function(){
                    $el.removeClass('active');
                })
                url = encodeURIComponent($el.attr("href"));
                data_query= $el.attr('data-query');
                obj={
                    pv:'v',
                    query: 'cu='+encodeURIComponent(location.href) + (!!data_query ? '&'+data_query : '') + (!!url ? '&nu='+url : ''),
                };
                console.log(url);
                if(!!url && url.indexOf('#')!=0 && $el.attr("target")!='_blank'){//需延时300MS，不允许直接跳转
                    obj.event=e;
                    obj.callback=function(){
                      window.location = el.getAttribute('href');
                    }
                }
                $.sendPVStats(obj);
            }
        })
    },
    
    setShowimg: function(){
        window._showimg = function(me){ //图渐显
            me.style.opacity=1;
            me.removeEventListener('load');
            me.removeAttribute('onload');
            me.onload=null;
            return false;
        } 
    }
};

window["app"] = app;
app.$pageLoading = $('.page-loading');

})(Zepto);    
;// utils
;(function($) {
    app.motions = {};
    app.has3d = true;

    app.motions.motionLocker = false;
    app.motions.generateTransform = function(x, y, z) {
        return "translate" + (app.has3d ? "3d" : "") + "(" + x + "px, " + y + "px" + (app.has3d ? (", " + z + "px)") : ")");
    };

    /**
     * 过门动画
     * @param currentEle 当前需要移走的元素
     * @param nextEle 需要移入的元素
     * @param dir 动画方向，0:无方向， 1:向左， 2:向右
     *
     */

    app.motions.screenTransition = function(currentEle, nextEle, dir, userSwiped, restore, callback) {
        // console.log('trans');
        if(!currentEle 
            || dir === 0 
            || $(currentEle)[0] == $(nextEle)[0]) {
            if(currentEle) {
                $(currentEle).hide();
            }
            $.later(function(){
                $(nextEle).show();
            });
            callback && callback();
            return;
        }
        // console.log('trans1');
        if((userSwiped &&!this.motionLocker) || !userSwiped) {
            userSwiped && (this.motionLocker = true);

            //准备位置
            nextEle = $(nextEle);
            currentEle = $(currentEle);
            // Jack
            /*
            var zeroPos = {"-webkit-transform" : this.generateTransform(0, 0, 0)};
            nextEle.css("-webkit-transform",  this.generateTransform((dir === 1 ? "" : "-") + $(window).width(), 0, 0)).show(); 
            currentEle.css(zeroPos);
            setTimeout(function() {
                currentEle.animate({translateX :  (dir === 1 ? "-" : "") + $(window).width() + "px" }, 400, 'ease-out', function() {
                    currentEle.hide();
                    // reset
                    currentEle.css(zeroPos);
                    userSwiped && (that.motionLocker = false);
                });
                nextEle.animate({translateX : 0}, 400, 'ease-out');
            }, 0);
            */
            
            var clientWidth = document.documentElement.clientWidth;

            currentEle.css({
                "-webkit-transition-property": "-webkit-transform",
                "-webkit-transform": this.generateTransform(0, 0, 0), 
                "-webkit-transition-duration": "0ms",
                "-webkit-transition-timing-function": "ease-out",
                "-webkit-transition-delay": "initial",
            });
            nextEle.css({
                "-webkit-transition-property": "-webkit-transform",
                "-webkit-transform": this.generateTransform((dir === 1 ? "" : "-") + clientWidth, 0, 0), 
                "-webkit-transition-duration": "0ms",
                "-webkit-transition-timing-function": "ease-out",
                "-webkit-transition-delay": "initial",
                "display": "block",
            });

            var that = this;
            setTimeout(function() {

                var ready = 0;

                function endNextTransition() {
                    nextEle.off('webkitTransitionEnd', arguments.callee);
                    ready++;

                    if(2 == ready){
                        endAllTransition();
                        callback && callback();
                    }
                }

                function endCurrentTransition() {
                    currentEle.off('webkitTransitionEnd', arguments.callee);
                    ready++;

                    if(2 == ready){
                        endAllTransition();
                        callback && callback();
                    }
                }

                nextEle.on('webkitTransitionEnd', endNextTransition);
                currentEle.on('webkitTransitionEnd', endCurrentTransition);

                function endAllTransition(){

                    // 是否恢复原状，子页面切换使用
                    if(restore){
                        currentEle.css({
                            "display": "none",
                            "-webkit-transform": that.generateTransform(0, 0, 0), 
                            "-webkit-transition-duration": "0ms"
                        });
                        nextEle.css({
                            "display": "block",
                            "-webkit-transform": that.generateTransform(0, 0, 0), 
                            "-webkit-transition-duration": "0ms",
                        });
                    }
                    else{
                        currentEle.css({
                            "display": "none",
                        });
                        nextEle.css({
                            "display": "block",
                        });
                    }
                    userSwiped && (that.motionLocker = false);
                }

                //开始动画
                nextEle.css({
                    "-webkit-transform": that.generateTransform(0, 0, 0), 
                    "-webkit-transition-duration": "350ms",
                });

                currentEle.css({
                    "-webkit-transform": that.generateTransform((dir === 1 ? "-" : "") + clientWidth, 0, 0), 
                    "-webkit-transition-duration": "350ms",
                });

            }, 0);
            
        }
    };
})(Zepto);
;// js base
;/**
 * Router类，监听URL变化，并作转发
 * 产品线需继承app.router类
 */
(function($) {

app.router = Backbone.Router.extend({

    // 实例化时自动调用
    initialize: function() {
        // 保存的控制器列表，对应不同页面
        this.controllers = {};

        // 记录控制器变化
        this.currentController = null;
        this.previousController = null;
    },
    
    /**
     * 路由配置
     * 按照Backbone.Router指定方式配置，例子如下，该部分产品线定义
     */
    routes: {
        /*
        "": "index",
        "index/:type": "index",
        "page/:src/:title": "page",
        "search/:word": "search",
        */
    },

    /** 
     * 页面切换顺序配置
     * 产品线按以下格式配置，使用action名称
     */
    pageOrder: [/*'index', 'search', 'page'*/],

    /**
     * Hander，对应action index的处理方法。产品线定义
     * 以下为例子
     */

    /*
    index: function(type) {
        this.doAction('index', {
            type: decodeURIComponent(type)
        });
    },

    page: function(src, title) {
        this.doAction('page', {
            src: decodeURIComponent(src),
            title: decodeURIComponent(title)
        });
    },

    search: function(word) {
        this.doAction('search', {
            word: decodeURIComponent(word)
        });
    },
    */

    /**
     * action通用处理逻辑
     * @{param} action {string} action名称
     * @{param} params {object} action参数
     */
    doAction: function(action, params){
        var me = this, controller = me.controllers[action];
        
        if(!controller){
            controller = me.controllers[action] 
                = new app.controller[action](params, null, action); 
        } 
        
        // 切换控制器
        me.previousController = me.currentController;
        me.currentController = controller;

        me.switchPage(
            me.previousController, 
            me.currentController, 
            params
        );
    },

    /**
     * 通用切换页面逻辑
     * @{param} from {app.controller}
     * @{param} to {app.controller}
     * @{param} params {object}
     */
    switchPage: function(from, to, params){
        var me = this;

        var dir = 0, order = me.pageOrder, 
            fromAction = from && from.action || null,
            toAction = to && to.action || null,
            fromIndex, toIndex;

        if(fromAction !== null && null !== toAction){
            if(-1 != ( fromIndex = order.indexOf( fromAction ) )
                && -1 != ( toIndex = order.indexOf( toAction ) ) ){
                dir = fromIndex > toIndex ? 2 : 1;
            }
        }

        if(me.previousController) {
            me.previousController.view.__top = window.scrollY;
        }

        $.each(from == to ? [from] : [from, to], function(key, item){
            item && item.trigger('pagebeforechange', {
                from: me.previousController, 
                to: me.currentController,
                params: params 
            });
        });
        
        app.motions.screenTransition(
            from && from.view.el, 
            to && to.view.el, 
            0,
            false,
            false,
            function(){
                /**
                 * 尽可能等切换稳定了再开始数据请求
                 * 延后一点用户感觉不出来，但能保证页面的稳定性
                 */

                $.each(from == to ? [from] : [from, to], function(key, item){
                    item && item.trigger('pageafterchange', {
                        from: me.previousController, 
                        to: me.currentController,
                        params: params 
                    });
                });

                var top = me.currentController.view.__top ? me.currentController.view.__top : 0;
                window.scrollTo(0, top);
            });

    }

}); 

})(Zepto);


;
/**
 * Model类
 */
(function($) {

app.model = Backbone.Model.extend({
    initialize: function(attributes, options){
        this.controller = options.controller;
        if(!this.controller){
            alert('亲，创建view，记得要传controller！');
            throw new Error('亲，维护控制器树，人人有责！');
        }

        // 页面事件中心
        this.ec = this.getPageController();
    },

    // 获取页面控制器
    getPageController: function(){
        return app.view.prototype.getPageController.apply(this, arguments);
    }

});

})(Zepto);

;/**
 * Collection类
 */
(function($) {

app.collection = Backbone.Collection.extend({
    initialize: function(models, options){
        this.controller = options.controller;
        if(!this.controller){
            alert('亲，创建view，记得要传controller！');
            throw new Error('亲，维护控制器树，人人有责！');
        }

        // 页面事件中心
        this.ec = this.getPageController();
    },

    // 获取页面控制器
    getPageController: function(){
        return app.view.prototype.getPageController.apply(this, arguments);
    }

});

})(Zepto);

;/**
 * Controller基类，控制页面逻辑 
 */
(function($) {

/**
 * 构造函数
 * @{param} options {Object} 构造选项
 * @{param} parentController {app.controller} 父控制器
 * @{param} action {string} 对应的action名称，页面控制器必须传入，其他控制器可选
 */
var controller = app.controller = function(options, parentController, action){
    this.options = _.extend({}, options);

    // action，对于页面控制器来说，用于识别页面属于哪个action
    // 子控制器可以不关心该参数
    this.action = action || null;

    // 页面控制器
    if(undefined === parentController){
        alert('亲，创建controller，记得要传parentController！');
        throw new Error('亲，维护控制器树，人人有责！');
    }

    // 父级控制器
    this.parentController = parentController || null;

    // 页面事件中心，页面控制器作为整个页面的事件中心
    this.ec = this.pc = this.getPageController();

    // 子控制器
    this.subControllers = {};

    // 关联的视图与模型
    this.view = null;
    this.model = null;
    this.collection = null;

    // 子页面切换历史，用于拉圾回收
    this.subPageSwitchHistory = [];
    // 其页面切换顺序，用于切换方向计算
    this.subPageSwitchOrder = [];

    // 初始化
    this.initialize.apply(this, arguments);
};

controller.extend = Backbone.Router.extend;

_.extend(controller.prototype, Backbone.Events, {

    // 初始化函数，子类继承之
    initialize: function(){
        this.registerEvents();
    },

    // 获取页面控制器
    getPageController: function(){
        var me = this, p, c;
        p = c = me;

        while(p){
            c = p;
            p = p.parentController;
        }
        return c;
    },

    // 销毁当前控制器，连带以当前控制器为根的树一起销毁
    destroy: function(){
        var me = this;

        for(var controller in me.subControllers){
            controller.destroy();
        }

        // 非页面级控制器进行销毁处理
        if(me.pc != me){
            me.view && me.view.destroy();             
        }
    },

    // 整体事件注册，子类重写之
    registerEvents: function(){},

    // 取消事件注册，子类重写之
    unregisterEvents: function(){},

    /**
     * 对过多的子页面进行回收
     * 思路：清除浏览历史上离当前最远的非当前的子页面
     */
    garbageCollect: function(){
        // console.log('garbage collect...');
        var me = this, toDestroy, sub,
            history = me.subPageSwitchHistory;

        // 非页面控制器调用该方法直接返回
        if(me != me.pc) return;

        // console.log(history);
        if(history.length > app.controller.MAX_SUBPAGES){
            toDestroy = history.shift();
            // console.log('remove ' + toDestroy);
            if(sub = me.subControllers[toDestroy]){
                sub.destroy();
                me.subControllers[toDestroy] = null;
            };
        }
    },

    // 添加子页面切换顺序值
    addOrder: function(param){
        // console.log('add order');
        var me = this, order = me.subPageSwitchOrder;

        // 非页面控制器调用该方法直接返回
        if(me != me.pc) return;
        // 只添加新值
        if(order.indexOf(param) < 0){
            order.push(param);
        }
    },

    // 添加子页面浏览历史值
    addHistory: function(param){
        // console.log('add History');
        var me = this, history = me.subPageSwitchHistory,
            index;

        // 非页面控制器调用该方法直接返回
        if(me != me.pc) return;
        
        // console.log('before addhistory: ');
        // console.log(history);
        if((index = history.indexOf(param)) >= 0){
            history.splice(index, 1);
        }
        // console.log(history);
        // console.log(param);
        history.push(param);
        // console.log('after addhistory: ');
        // console.log(history);
    }

});

app.controller.MAX_SUBPAGES = 5;

})(Zepto);


;/**
 * View基类，控制展现逻辑 
 */
(function($) {

app.view = Backbone.View.extend({
    
    events: {},

    // 初始化函数，子类继承之
    initialize: function(){
        this.controller = this.options.controller;
        if(!this.controller){
            alert('亲，创建view，记得要传controller！');
            throw new Error('亲，维护控制器树，人人有责！');
        }

        // 页面事件中心
        this.ec = this.getPageController();

        this.$pageLoading = app.$pageLoading;

        this.registerEvents();
    },

    showLoading: function(wrapper){
        var me = this;
        /**
         * 避免初始化到pagebeforechange事件发生之间loading展示，并且位置不对的问题
         * 先将wrapper隐藏，wrapper和loading是替换关系
         */
        // wrapper && $(wrapper).hide()
        wrapper && me.$pageLoading.parent() !== wrapper && $(wrapper).append(me.$pageLoading);
        me.$pageLoading.show().css('display','-webkit-box');
    },

    hideLoading: function(){
        var me = this;
        $.later(function(){
            me.$pageLoading.hide();
            me.$pageLoading.remove();
        }, 300);
    },

    // 获取页面控制器
    getPageController: function(){
        var me = this, p, c;
        p = c = me.controller;

        while(p){
            c = p;
            p = p.parentController;
        }
        return c;
    },

    destroy: function(){
        var me = this;
        
        me.unregisterEvents();
        me.undelegateEvents();

        me.$el.remove();
        me.el = me.$el = null;
        // console.log('11111111111111');
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){},

    // 取消事件注册，子类重写之
    unregisterEvents: function(){}
});

})(Zepto);



;(function($){
    $.cookie = function(name, value, options) {
        if (typeof value != 'undefined') {
                  options = options || {};
                  if (value === null) {
                            value = '';
                            options = $.extend({}, options);
                            options.expires = -1;
                  }
                  var expires = '';
                  if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
                            var date;
                            if (typeof options.expires == 'number') {
                                      date = new Date();
                                      date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
                            } else {
                                      date = options.expires;
                            }
                            expires = '; expires=' + date.toUTCString();
                  }
                  var path = options.path ? '; path=' + (options.path) : '';
                  var domain = options.domain ? '; domain=' + (options.domain) : '';
                  var secure = options.secure ? '; secure' : '';
                  document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
                  return this;
            } else {
                  var cookieValue = null;
                  if (document.cookie && document.cookie != '') {
                            var cookies = document.cookie.split(';');
                            for (var i = 0; i < cookies.length; i++) {
                                  var cookie = cookies[i].trim();
                                  if (cookie.substring(0, name.length + 1) == (name + '=')) {
                                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                                            break;
                                  }
                            }
                  }
                  return cookieValue;
        }
    };
})(Zepto);;(function($){
    /*
     * 扩展到$的cookie方法
     * 调用方法:
     * $(document).ready(function() {
     * $('#wCookies').click(function(){
             $.cookie('name', 'test',{expires: 7});  //设置 
        });
        $('#rCookies').click(function(){
             var test = $.cookie('name');//获取
             alert (test);
        });
        $('#dCookies').click(function(){//删除
             $.cookie('name', null);                                        
        });
        });
     * 
     * 
     * */
    $.cookie = function(name, value, options) {
        name && name.replace(/[\=\;]/g,'');
        if (typeof value != 'undefined') {
                  options = options || {};
                  if (value === null) {
                            value = '';
                            options = $.extend({}, options);
                            options.expires = -1;
                  }
                  var expires = '';
                  if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
                            var date;
                            if (typeof options.expires == 'number') {
                                      date = new Date();
                                      date.setTime(date.getTime() + (options.expires * 24 * 60 * 60 * 1000));
                            } else {
                                      date = options.expires;
                            }
                            expires = '; expires=' + date.toUTCString();
                  }
                  var path = options.path ? '; path=' + (options.path) : '';
                  var domain = options.domain ? '; domain=' + (options.domain) : '';
                  var secure = options.secure ? '; secure' : '';
                  document.cookie = [name, '=', encodeURIComponent(value), expires, path, domain, secure].join('');
                  return this;
            } else {
                  var cookieValue = null;
                  if (document.cookie && document.cookie != '') {
                            var cookies = document.cookie.split(';');
                            for (var i = 0; i < cookies.length; i++) {
                                  var cookie = cookies[i].trim();
                                  if (cookie.substring(0, name.length + 1) == (name + '=')) {
                                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                                            break;
                                  }
                            }
                  }
                  return cookieValue;
        }
    };
    
     var getValue = function(object, prop) {
        if (!(object && object[prop])) return null;
        return _.isFunction(object[prop]) ? object[prop]() : object[prop];
      },
      isCache = true,
      requestSteps= [];
      
      try {
          localStorage.setItem('cache','test');
        } catch (e) {
            isCache = false;
      }

        
        
    var Store = $.localStorage = function(name, uptime) {
          var minutes = 1000*60;
          this.name = name;
          this.uptime= ((typeof (+uptime)==='number' && uptime > 0 && uptime  ) ||  1500) * minutes;
          var store = localStorage.getItem(this.name);
          this.data = (store && JSON.parse(store)) || {};
        },
        vessels = {},
        myStore;
        
        _.extend(Store .prototype,{

              // Save the current state of the **Store** to *localStorage*.
              save: function() {
//                console.log(this.name,'中更新了来自 ',decodeURIComponent(_.map(this.data,function(val,key){return key})[0]),'的缓存数据');
                localStorage.setItem(this.name, JSON.stringify(this.data));
              },

              // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already
              // have an id of it's own.
              create: function(model) {
                //if (!model.id) model.set(model.idAttribute, guid());
                model.__time= Date.now();
                this.data[model.__id] = model;
               // $.cookie(model.__id, this.name+Date.now() , {expires: date});
                
                this.save();
                return model;
              },

              // Update a model by replacing its copy in `this.data`.
              update: function(model) {
                 model.__time= Date.now();
                this.data[model.__id] = model;
                this.save();
                return model;
              },

              // Retrieve a model from `this.data` by id.
              find: function(id) {
                var model= this.data[id],
                    time= Date.now(),
                    uptime= this.uptime;
                    return $.isObject(model) && (typeof (+model.__time) ==='number') && (time - model.__time < uptime) ? model : false;
              },

              // Return the array of all models currently in storage.
              findAll: function() {
                return _.values(this.data);
              },

              // Delete a model from `this.data`, returning it.
              destroy: function(model) {
                delete this.data[model.__id];
                this.save();
                return model;
              }

        });
        
        
        var sync= function(method, model, options){
                var options = options ? _.clone(options) : {},
                    url= options.url, 
                    success= options.success, 
                    id, 
                    resp, 
                    ajaxtime = 500,
                    setTime = null,
                    self = this;
                
                
                
                if(!url){
                    url= getValue(model, 'url');
                }
                
                id= encodeURIComponent(url);
                //将success添加一段代码将起保存在localStorage里面
                options.success = function(resp, status, xhr) {
                    resp.__id= id;
                    myStore.create(resp);
                    //执行backbone fetch定义的success
                    success.apply(options , arguments);
                };
               
              $.later(function(){
                  
                    if(id && $.isObject(resp= myStore.find(id)) ){
                        //修改正在请求的ajax的success方法,仅保存到localStorage里面
                            options.success = function(resp, status, xhr){
                                resp.__id= id;
                                myStore.create(resp);       
                            }
//                          console.log('读取自缓存数去');
                            success.call(options , resp, 'success' , null);
                    }
                    
                    Backbone.sync.call(self, 'read', self, options);
        
              },10);
        }
        
    $.sync= function(name,date){
        if(isCache){
            myStore= vessels[name] || (vessels[name]= new Store(name, date));
            return sync;
        }else{
            return function(method, model, options){
                 Backbone.sync.call(this, method, this, options);
            }
        }
    }   
    
     
    
      
})(Zepto);;(function($,win){
    /*
     * 页面统计 p.gif
     */
    
    function sendPStats(options) {
        var b = new Date().getTime(), 
            a = new Image();
        window["log_" + b] = a;
        a.src = Pgif + options + "&t=" + b;
    };


    /*
     * 页面统计 v.gif
     */
    
    /*
     * 页面统计 pv.gif
     * pv:      类型        {p || v}        //是页面加载统计，还是点击统计
     * query    发送的参数 ｛obj || str｝   //要发送的参数
     * event    事件对象    {event}         //事件对象，用来确定DOM
     * callback 回调函数    {callback}      //主要用来第三方页面跳转
    $.sendPVStats({
            pv:'v',
            query:{
                u:location.href,
                p: 2508,
                txt:'txt',
            }
        });
     *  $.sendPvStats({
     *      query:{
     *      u:location.href
     *  }
     *  })
     */
    var gifType= {
            vgif : "http://nsclick.baidu.com/v.gif?pid=104&",
            pgif : "http://nsclick.baidu.com/p.gif?pid=104&",
        }
    function sendPVStats(options) {
        var time = Date.now(), 
            img = new Image(),
            node, target,
            options = options || {},
            callback= options.callback,
            query= options.query || {u: location.href},
            event= options.event,
            gif = gifType[(options.pv || 'p')+'gif'];
            
            window["bd_" + time] = img;
            
            query = $.isObject(query) ? $.param(query) : query;
            
            img.src =gif + query + "&t=" + time;
            console.log.apply(console,['发送了统计',options.pv || 'p','地址为：'].concat(query.split('&')));
           if(options.pv=='v'){
               
               target = event && ((node= event.target).nodeType == 1 ? node : node.parentNode);
                        
               if(target && target.getAttribute('data-clicked') == "1"){
                    return false;
                }
                target && target.setAttribute('data-clicked', "1");
               
                if(callback){
                     setTimeout(function(){
                        callback(event);
                        target && target.removeAttribute("data-clicked");
                    },300)  
                }else{
                    target && target.removeAttribute("data-clicked");
                }
           } 
           return false;
        
    }
    
    $.sendPVStats =sendPVStats;
    
})(Zepto,window);;(function($){
    var gotop;
    var interval=null,
        wp1 = 0,wp2 = 0,
        dir =1;

        $doc = $(document);
        $doc.on('scroll',function(e){
            if(!interval){
                wp1=window.pageYOffset;
                var ev ={type: 'start' ,top:wp2, dir:dir};
                $doc.trigger('myscroll',ev);
                interval = setTimeout($.bind(stop, window, [e]),250);
            }

        });
        function stop(e){
            wp2=window.pageYOffset;
            if(wp2==wp1){
                interval=null;
                var ev = {type: 'end' ,top:wp2, dir:dir};
                $doc.trigger('myscroll',ev);
            }else if(wp2<wp1){
                dir =-1;
            }else{
                dir =1;
            }
            wp1=wp2;
            if(!!interval) interval = setTimeout($.bind(stop, window, [e]),250);
        }
})(Zepto);;/**
 * 
 * 所有 header View类
 * 子类若有方法重复，请调用 app.view.header.prototype.被覆盖的方法名.apply(this, arguments);
 */
(function($) {

app.view.header = app.view.extend({

    initialize: function(){
        var me = this;
        me.showSearch = false;
        // 表单
        me.$form = me.$('.search-form');
        me.$searchInput = me.$('.search-input input');
        me.$toolbar = me.$('.ui-toolbar-container');
    //    me.$navigator = me.$('.ui-navigator-wrap');
        me.isNavigatorInitialized = false;
        var opt = _.extend({}, me.options);
        console.info(opt);
        // 初始化工具栏和Suggestion
        me.initToolbar();
        // me.initNavigator();
        me.initSuggestion();

        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    registerEvents: function(){
        var me = this, ec = me.ec, resize, $el = me.$el;
        
        resize = $.bind(me.resize, this);
        $(window).on('ortchange', resize);
        
        me.$form.on('click touchstart', function(e){
            e.stopPropagation();
            if(e.target.tagName == 'FORM' && e.type =='click'){
                 me.hideSearchBar();
            }
        })
        ec.on('pageafterchange', me.onpageafterchange, me);
        ec.on('pagebeforechange', me.onpagebeforechange, me);
        
     
        $(document).on('myscroll', function(e){
            var data=e.data, top = data.top,dir =data.dir,type =data.type;
            console.log('myscroll----',type,dir,top);
            if(top<200){
                $el.css('opacity',1);
                return;
            }
            if(type =='start')
                $el.css({top: '0',opacity:'0.5'});
            if(dir<0){
                if(type =='end'){
                    me.$el.css({top:top-1,'z-index':'99999',opacity:'1'});
                }
            }
        })
    },

    hideSearchBar: function(){
        var me = this;
        me.showSearch = false;
        $.later(function(){
             scrollTo(0,1);
        },500)
        me.$searchInput.blur();
        
        if(navigator.appVersion.indexOf('Nexus')!= -1)
            $('body').css('overflow','auto');
        me.$form.hide();
        me.hideMask();
        me.suggest.hide();
        me.sugDialog.hide();
    },

    showSearchBar: function(){
        var me = this;
        if(navigator.appVersion.indexOf('Nexus')!= -1)
            $('body').css('overflow','hidden');
        me.showSearch = true;
        me.$form.show();
        me.$searchInput.focus();
        me.showMask();
    },
    
    showMask: function(){
        var me = this,
            root = document.body;
        me.$form.css({
            width: root.clientWidth,
            'background-color':'rgba(255,255,255,0)',
            position:'absolute',
            'z-index': '99',
            height: Math.max(root.scrollHeight, root.clientHeight)
        });
    },
    
    hideMask: function(){
          var me = this,
            root = document.body;
        me.$form.attr('style','display:none;');
    },
    
    resize:function(){
        var me = this,
        $mask = me.$form,
        root = document.body,
        ucOffset = $.browser.uc ? 1 : 0; // add by zmm, 在UC下，mask盖住window不会触发resize事件，故减掉1px
        if (me.showSearch) {
            
            $.later(function(){
                $mask.css({
                    width:  root.clientWidth,
                    height: Math.max(root.scrollHeight, root.clientHeight) - ucOffset
                });
                    scrollTo(0,45);
              })
        }   
    },
    
    initToolbar: function(){
        var me = this;
        var nav = me.$('.nav');
        var toolbarTitle = me.$('.ui-toolbar-title');
        //localstorage 1 开启，0 关闭
        me.isFirstClick = true;
        me.toolBar = $.ui.vs_toolbar(
            me.$toolbar, {
                isTitleClickable: true,
                isNewPageProduct: false,
                // 检索按钮点击回调函数
                onTitleClick :function(){
                //    me.$navigator.toggle();
                    if(me.isFirstClick && localStorage.nav == 0){
                        me.initNavigator();
                        me.isFirstClick = false;
                    }
                    if(localStorage.nav == 1){
                        localStorage.nav = 0;
                        nav.css("height","0");
                    }else{
                        localStorage.nav = 1;
                        nav.css("height","45px");
                    }
                },
                onSearchButtonClick: function(e){
                  e.preventDefault();
                     $.sendPVStats({
                      pv:'v',
                      query:{
                          u:location.href,
                          p: 2505,
                          txt:'searchbtn',
                      }
                  });
                    if(me.showSearch){
                        me.hideSearchBar();
                        me.ec.trigger('searchbarhide', {
                        });
                    }else{
                        me.showSearchBar();
                       var  height = me.$form.height();
                        me.ec.trigger('searchbarshow', {
                            height: height
                        });
                    }
                },
                // 产品按钮点击回调函数
                onProductButtonClick: function(){
                  Backbone.history.navigate('#product', {trigger:true});
                 },

                 onBackButtonClick: function(){
                   Backbone.history.navigate('#index', {trigger:true});
                }
            }
        );
        if(localStorage.nav == 0 && toolbarTitle.hasClass('ui-toolbar-title-up-arrow')){
            toolbarTitle.removeClass('ui-toolbar-title-up-arrow')
            toolbarTitle.addClass('ui-toolbar-title-down-arrow')
        }
    },
    initNavigator:function(){
        var me = this;
        if(me.isNavigatorInitialized) return;
        me.getPosition();
        var nav = me.$('.nav');
        var navUl = me.$('.nav .ui-navigator-list');
        //榜单nav部分需要延迟100，否则样式会乱
        $.later(function (){
            me.nav =   $.ui.navigator(nav,{
                content:[
                    {text:"精选", url:"#index"},
                    {text:"电影", url:"#channel/movie"},
                    {text:"电视剧", url:"#channel/tvplay"},
                    {text:"综艺", url:"#channel/tvshow"},
                    {text:"动漫", url:"#channel/comic"},
                    {text:"榜单", url:"#toplist/all"}
                ],
                defTab: me.position
            });

        },10);
        me.isNavigatorInitialized = true;
    },

    initSuggestion: function(){
          var me = this, 
          width = me.$('.search-input').width() + me.$('.search-button').width(),
          $input= me.$searchInput;
          
      var d = me.sugDialog = $.ui.dialog({
          width: 250,
          closeBtn: false,
          title: '清除全部历史记录？',
          content: '<div class="buttonContent"><button class="no">取消</button><button class="ok">确定</button></div>'
      }),

      clearHistory = function() {
          me.suggest.history(null);
          me.suggest.hide();
          d.hide();
      },

      topUp = function(e){
        $.later(function(){
            scrollTo(0,45);
        })

      },

      topDown = function(){
      
      };
        $.ui.create('suggestion_video', $.ui.suggestion, {
            _setSize: function(){
                return this;
            }
        });
        me.suggest = $.ui.suggestion_video({
            
          container:  $input,
          source: "http://sug.m.baidu.com/su?ie=utf-8",
          height: 80,
          offset: {x: -1},
          width: width,
          onsubmit: function(val){
              me.hideSearchBar()
            location.href="http://m.baidu.com/video?ct=301989888&tj=i_sbtn1_870_his_0&hisv=1&sugv=0&rn=10&pn=0&db=0&s=0&fbl=800&word="+val;
          },
          onselect : function(item) {
              me.$(item).addClass("selected");
          }
      });
      $('.no', d.widget()).on('click', function(e) {
        d.hide();
        me.showSearchBar()
      });
      $('.ok', d.widget()).on('click', function(e) {
        clearHistory();
        me.showSearchBar()
      });

      // 搜索框置顶
      me.suggest.on('open', topUp).on('close', topDown).clearHistory = function() {
           d.show();
            me.suggest.leaveInput();
      };

      //点击按钮提交
      me.$form.on('submit', function(){
          var _val = me.$searchInput.val(),
              route;
          
          _val = encodeURIComponent(_val.replace(/^\s+|\s+$/g, ''));
         // route = 'search/' + encodeURIComponent(_val);  

          setTimeout(function(){
            if(_val)
                    location.href="http://m.baidu.com/video?ct=301989888&tj=i_sbtn1_870_his_0&hisv=1&sugv=0&rn=10&pn=0&db=0&s=0&fbl=800&word="+_val;
            else
                me.hideSearchBar()
          }, 0);

          isMoveTop = false;
          me.suggest.hide();
          return false;
      });
  },

    onpagebeforechange: function(params){
        var me = this, ec = me.ec,
            from = params.from, to = params.to,
            param = params.params, 
            pageController = me.ec;
        if(to == pageController){
            me.$el.show();
        }
    },

    onpageafterchange: function(params){
        var me = this, ec = me.ec,
            from = params.from, to = params.to,
            param = params.params, 
            pageController = ec;
        var nav = me.$('.nav');
        if(to == pageController){
            if(localStorage.nav == 1){
                nav.css("height","41px");
                nav.css("display","block");
                me.initNavigator();
            }
            else{
                nav.css("height","0");
            }

            var navLi = me.$('.nav li');
            me.getPosition();
            me.nav && me.nav.switchTo(me.position);
        }

    },
    getPosition :function(){
        var me = this,
            pageController = me.ec,
            action = pageController.action,
            curChannel = pageController.view.currentChannel;

        if(action == "toplist"){
            me.position = 5;
        }else if(action == "index"){
            me.position = 0;
        }else{
            if(curChannel == "movie"){
                me.position = 1;
            }else if(curChannel == "tvplay"){
                me.position = 2;
            }else if(curChannel == "comic"){
                me.position = 4;
            }else{
                me.position = 3;
            }
        }
    }
});

})(Zepto);




// app routers
;/**
 * video产品的Router类
 */
(function($) {

app.router.video = app.router.extend({

    // 路由配置
    routes: {
        
        "": "index",
        
        "index": "index",
        
        "channel": "channel",
        "channel/:type": "channel",
        "channel/:type/:page": "channel",
        
        "toplist": "toplist",
        "toplist/:type": "toplist",
            
        "feedback": "feedback",

        "product": "product"
    },

    // 页面切换顺序配置
    pageOrder: ['product', 'index', 'channel', 'toplist', 'feedback'],

    index: function(type) {
        this.doAction('index', {
        });
    },

    channel: function(type,page) {
        this.doAction('channel', {
            type: decodeURIComponent(type)
        });
    },
    
    toplist: function(type){
          this.doAction('toplist', {
            type: decodeURIComponent(type)
        });
    },
    
    product: function(){
          this.doAction('product', {});
    },
    
    feedback: function(type){
          this.doAction('feedback', {
            type: decodeURIComponent(type)
        });
    }
    

}); 

})(Zepto);



;// page index
;(function($){
/**
 *css3 Touch Scroll
 *
 * @author: zhangnan
 * 
 * @param   {Object}    options;
 * @config  {zepto}     options.navList         //导航节点
 * @config  {zepto}     options.$el //滑动列表外层元素  
 * @config  {Function || Array([fn || html])}   options.listData//该参数用来插入数据，若为function则返回dom节点(如view.el);
 * @config  {Number}    options.animTime        //默认为500 
 * @config  {Function}  options.callback        //动画完成之后回调函数  
 * @isFollow {Boolean}  obtions.isFollow        //是否跟随,默认false
 * @isFollow {Boolean}  obtions.loop            //循环的时间/ms
 * 
 * 
 * 
 * 
 * $('#index_view_hot .carousel').touchCarousel({
                            navList:$('#index_view_hot .index_view_hot_state>div'),
                            listData:['<a href="1">1</a>','<a href="2">2</a>'],
                            isFollow:true,
                            loop : 3000,
                            callback:function(){
                                
                            },
                            beforecallback:function(){
                            }
                        });
 */

var TouchScroll=function(options){
    _.extend(this,arguments.callee.defaultData, options);
    this.init();
};

//默认参数
TouchScroll.defaultData= {
        listData: [],
        isFollow: false,
        animTime: 500,
        curIndex: 0,        //是导航节点默认的选中索引
        posIndex: 0,        //是外围动画节点的移动单位距离
        loop: 0,
        callback:function(){
                                
                },
        beforecallback:function(){
        }
}

_.extend(TouchScroll.prototype,{
    //属性重置
    refresh:function(){
        var listEl=[];          
        var fragment=document.createDocumentFragment('div');
            for(var i=0;i<3;i++){
                var div=document.createElement('div');
                fragment.appendChild(div);
                div.style.cssText='width:100%;position:relative;overflow:hidden; left:-'+ i *100+'%';
                listEl.push(div);
            }
        this.$el.css('display','-webkit-box').html(fragment);
        this.listEl=listEl;
        this.touchEnabled=true;
        this.maxIndex=this.navList.length-1;
        this.resizeShow()
        this.setAnimTime(this.animTime);
        
        this.setLoop();
        var self = this;
        if(this.loop){
            //页面失去焦点时，停止动画
            addEventListener('blur',function(e){
                self.stopLoop();
            },false);
            
            addEventListener('focus',function(e){
                self.setLoop();
            },false);
        }
        
        return this;
    },
    //顾名思义
    init:function(){
        var self=this;
        addEventListener('onorientationchange' in window ? 'orientationchange' : 'resize', function(e){
            self.resizeShow(e)
        });

        /*
        this.navList.on('touchstart',function(e){
            e.preventDefault();e.stopPropagation();
            var i=$(this).index();
            if(i==self.curIndex){
                return ;
            }else if(i>self.curIndex){
                self.toNext(i);
            }else{
                self.toPrev(i);
            }
            return ;
        })
    */  
        this.isFollow ? this.initTouchFollow() : this.initTouch();
        self.refresh();
        
        return this;
    },
    //开始自动轮播
    setLoop:function(){
        if(!this.loop || this.loopFoo)
            return ;
        
        var self= this;
        this.loopFoo = setInterval(function(){
            self.toNext();
        },this.loop)
    },
    //停止自动轮播
    stopLoop:function(){
        if(!this.loop && !this.loopFoo)
            return;
        
        clearInterval(this.loopFoo);
        this.loopFoo = null;
    },
    //一看就懂
    touchEv:(function(){
        var isTouchPad = (/hp-tablet/gi).test(navigator.appVersion),
        hasTouch='ontouchstart' in window && !isTouchPad;
        return {
            hasTouch:hasTouch,
            START_EV:hasTouch ? 'touchstart' : 'mousedown',
            MOVE_EV:hasTouch ? 'touchmove' : 'mousemove',
            END_EV:hasTouch ? 'touchend' : 'mouseup'
        }
    })(),
    //不跟随动画注册
    initTouch:function(){
        var now=null,
            touch={},
            self=this,
            timeout,
            touchEv=this.touchEv;
        this.$el.on(touchEv.START_EV,function(e){   
            if(!self.touchEnabled)
                return ;
            
            if(e.touches.length!==1)
                return ;
            self.stopLoop();
            
            touch.x1=self.getPoint(e,'clientX');
            touch.y1=self.getPoint(e,'clientY');
            timeout=setTimeout(function(){
                timeout=null;
            },800);
        }).on(touchEv.MOVE_EV,function(e){
            if(!self.touchEnabled)
                return ;
            if(timeout){
                touch.x2=self.getPoint(e,'clientX');
                touch.y2=self.getPoint(e,'clientY');
                dir=self.swipeDirection(touch.x1,touch.x2,touch.y1,touch.y2);
                if(dir=='Left' || dir=='Right')
                    e.preventDefault(); 
            }
        })
        $(document.body).on(touchEv.END_EV,function(e){
            if(timeout && touch.x2 && Math.abs(touch.x1 - touch.x2) > 5){
                if(dir=='Left'){
                    self.toNext();
                }else if(dir=='Right'){
                    self.toPrev();
                }
            };
            touch={};
        });
        return this;
    },
    //跟随动画注册
    initTouchFollow:function(){
        var touchEv=this.touchEv,
            self=this,
            scrolling=null,
            startX=0,
            startY=0,
            moveX=0,
            moveY=0,
            baseX=0,
            distX,
            newX,
        //  startTime,
            dir=0,
            transX;
        this.$el.on(touchEv.START_EV,function(e){
            if(!self.touchEnabled && e.touches.length!=1)
                return ;
            self.stopLoop();
            
            if(!touchEv.hasTouch)
                e.preventDefault();
            self.setAnimTime(0);
            scrolling=true;
            moveRead=false;
            startX=self.getPoint(e,'clientX');  
            startY=self.getPoint(e,'clientY');  
            baseX=startX;
            //startTime=e.timeStamp;
            dir=0;
        }).on(touchEv.MOVE_EV,function(e){
            if(!scrolling)
                return ;
            
            var moveX=self.getPoint(e,'clientX'),
                moveY=self.getPoint(e,'clientY');
            if(moveRead){
                distX=moveX-baseX;
                newX=self.currentX+distX;
                self.setX(newX);
                dir= distX>0 ? 1 : -1;
            }else{
                var changeX=Math.abs(moveX-startX),
                    changeY=Math.abs(moveY-startY);
                if((changeX/changeY)>1){
                    event.preventDefault();
                    event.stopPropagation();
                    moveRead=true;
                }else if(changeY>5){
                    scrolling=false;
                    self.setAnimTime(self.animTime);
                }
            };
            baseX=moveX;
        });
        $(document.body).on(touchEv.END_EV,function(e){
            if(!scrolling)
                return ;
            scrolling=false;
            transX = baseX-startX;
            if(transX > 50){
                self.toPrev(null, 200);
            }else if(transX < -50){
                self.toNext(null, 200);
            }else{
                self.toNext(self.curIndex,100);
            }
        })
        return this;
    },
    //去上一页
    toPrev:function(i, time){
        i = i==undefined ?  this.curIndex-1 : i;
        if((i+1)!=this.curIndex && this.curIndex!==0)
            this.listEl[0].innerHTML="";/*若上一个个选中点不是相邻的节点则清空*/
        if(i<0)
            i=this.navList.length-1;
        this.setTrans.apply(this, [i, time]);
        return this;
    },
    //去下一页
    toNext:function(i, time){
        i = i==undefined ?  this.curIndex+1 : i;
        if((i-1)!=this.curIndex && this.curIndex!==this.maxIndex)
            this.listEl[2].innerHTML="";/*若下一个选中点不是相邻的节点则清空*/
        if(i>this.maxIndex)
            i=0;
        this.setTrans.apply(this, [i, time]);
        return this;
    },
    //跳到指定的页数
    goIndex: function(index){
        var self = this;
        if(index==self.curIndex){
            return ;
        }else if(index>self.curIndex){
            self.toNext.apply(self,arguments);
        }else{
            self.toPrev.apply(self,arguments);
        }
        return ;

    },
    //关键函数-判断方向，并且重新插入DOM节点
    setTrans:function(index,time){  //index是到转到的nav索引
        var maxIndex=this.maxIndex,
            self=this;
        time = time === undefined ? this.animTime : time;
        if(!self.touchEnabled) return;          //阻止了
            self.touchEnabled = false;
            

        self.setAnimTime(time);
        self.beforechange(index)
        
        self.insertDOM(1 , index);      //插入中间节点
        
        $.later(function(){
            self.setX(self.posIndex * self.scrollWid);
            $.later(function(){
                self.touchEnabled=true;
                self.afterchange(index)
            },time)
        });
        return this;
    },
    //获取要插入的页面的节点
    regulate:function (fn,num){
        var doms = null, dom = null;
        doms = this._domLibrary || (this._domLibrary = []);
        dom = doms[num];
        if(dom)
            return dom;
        
        if($.isArray(fn)){
            dom = this.regulate(fn[num],num);
        }else if($.isFunction(fn)){
            dom =  fn.apply(this.navList[num],arguments); //此方法必须返回一个DOM节点;
        }else{
            dom = fn;
        }
        dom = $(dom);
        return doms[num] = dom;
    },
    
    insertDOM: function(i, index){
        var self =this;
        var tempHTML;   
        var child;
        var listData = this.listData;   
        switch(i){
            case 0 :
                tempHTML=self.regulate(listData ,index == 0 ? self.maxIndex : index-1);
                break;
            case 1 :
                tempHTML=self.regulate(listData, index) ;
                break;
            case 2 :
                tempHTML=self.regulate( listData , index==self.maxIndex ? 0 : index+1);
        }
        /*绝对定位不占高度，相对定位可以让外围撑高*/
        child=self.listEl[i].firstElementChild;
        if(i===1 && child != null){
            /*只有是当前节点，且里面有值*/
            return ;
        }
        $(self.listEl[i]).html(tempHTML);
        
    },
    //重新获取宽度
    resizeShow:function(e){  
        var self=this;
        this.resizeTime && clearTimeout(this.resizeTime);
        this.resizeTime  = setTimeout(function(){
            self.resetWid(self.curIndex,0);
        },(!!e && $.os.android) ? 1000 : 500); //android反应不及时
        return this;
    },
    //获取相对于视图触摸位置
    getPoint:function(event,pos){
        var hasTouch=this.touchEv.hasTouch;
        if(hasTouch)
            return event.touches[0][pos];
        /*
        var point = hasTouch ? event.touches[0] : event;
        var scroll=hasTouch ? window[page+'Offset'] : document.body[page=='pageX' ? 'scrollLeft' : 'scrollTop'];
        return point[page]-scroll;
        */
    }, 
    //判断方向
    swipeDirection:function(x1, x2, y1, y2){
        var xDelta = Math.abs(x1 - x2), yDelta = Math.abs(y1 - y2)
        return xDelta >= yDelta ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');
    },
    //设置移动
    setX:function(x){
        this.currentX=x;
        this.$el.css(
            '-webkit-transform','translate3d('+x+'px, 0px, 0px) scale(1)'
        );
        return this;
    },
    //设置动画时间
    setAnimTime:function(time){
        time = time === undefined ? this.animTime : time;
        this.$el.css('-webkit-transition','-webkit-transform '+time+'ms');
        return this;
    },
    //重新排列顺序
    redraw:function(dir){   //重新排列数组 1向左，-1向右
        var wid=this.scrollWid;
        var curEl=this.listEl[dir+1];
        var oldEl=this.listEl[1];
        var othEl=this.listEl[1-dir];
        
        this.listEl[dir+1]=othEl;
        this.listEl[1]=curEl;
        this.listEl[1-dir]=oldEl;
        
        this.posIndex-=dir;
        
        $(othEl).css({'-webkit-transform':'translate3d('+(-this.posIndex+dir)*wid+'px, 0px, 0px) scale(1)'});//.empty();
        return this;
    },
    //重设宽度
    resetWid:function(){
        var self= this;
        var scrollWid=window.innerWidth;
        self.scrollWid=scrollWid;
        self.posIndex=0;
        $.each(self.listEl,function(i,n){
            var left=(i-1)*scrollWid;
            $(n).css({'-webkit-transform':'translate3d('+left+'px, 0px, 0px) scale(1)'});
        })
        self.setTrans.apply(self, arguments);
    },
    
    beforechange: function(index){
        
        var  
             self = this,
             oldIndex=self.curIndex,
             dir,
             maxIndex = self.maxIndex;
                    
        if(index==oldIndex){
            dir=0;
        }else if(index==maxIndex && oldIndex==0){
            dir=-1;
        }else if(index>oldIndex || (index==0 && oldIndex==maxIndex)){
            dir=1;
        }else{
            dir=-1;
        }
        
        self.redraw(dir);
        self.beforecallback.apply(self.navList[index],[index]);
    },
    
    afterchange: function(index){
        var self = this;
        /*回调函数，this只想选择的DOM节点，参数是索引*/
        
        self.insertDOM(0 , index);
//      self.insertDOM(1 , index);      //插入中间节点
        self.insertDOM(2 , index);
            for(var i=0;i<3;i++){
                    self.listEl[i].firstElementChild.style.cssText = i===1 ? 'position:relative;' : 'position:absolute;';
            }
        self.curIndex = index;
        self.setLoop();
        
        self.callback.apply(self.navList[index],[index]);
    }
    //设置当前页指示
    /*
    setNavList:function(index){
        this.navList.removeClass('cur');
        this.navList.eq(index).addClass('cur');
        return this;
    }
    */
    
});

//添加到Zepto
$.fn.touchCarousel=function(options){
    options.$el = this;
    var instance = new TouchScroll(options);
    return instance ;
} 

})(Zepto);;/**
 * 首页控制器
 */
(function($) {

app.controller.index = app.controller.extend({

    initialize: function(options, parentController){
        // 创建同级别view和model
        // this.model = new app.model.index({}, options); 
        this.firstLoad =true;
        

        var collec = this.collection = new app.model.index();
        this.view = new app.view.index({
            controller: this,
            el:$('#index_view'),
            collection: this.collection 
        }); 
        
        this.headView = new app.view.index.header({
            controller: this,
            el:$('#index_view header')
        }); 
        this.hotView= new app.view.index.hot({
            controller: this,
            el:$('#index_view_hot'),
            collection: collec 
        });
        
        this.menuView= new app.view.index.menu({
            controller: this,
            el:$('#index_view_menu'),
            collection: collec
        });
        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    },

    // 事件注册
    registerEvents: function(){
        var ec = this.ec, me = this;         
        ec.on('pageafterchange', me.onpageafterchange, me);
        ec.on('pagebeforechange', me.onpagebeforechange, me);
    },
    
    onpagebeforechange: function(params){
           var me = this, ec = me.ec;
           var from = params.from, to = params.to, 
           param = params.params;
         if(to== me){
                me.view.$el.show();
         }
    },
    
    onpageafterchange: function(params){
           var me = this, ec = me.ec;
           var from = params.from, to = params.to, 
           param = params.params;
          if(me != to){
             return  me.view.$el.hide();
          }
           if(me.firstLoad){
               this.collection.fetch({
                    dataType:"jsonp",
                   success: function(t){
                       console.log('success');
                       ec.trigger('pageload');
                   }, 
                   error: function(t){
                       console.log('error');
                       ec.trigger('pageloadfailed');
                   }
               });
               me.firstLoad = false;
          }
           
    }
    
});

})(Zepto);
;/**
 * 首页View类
 */
(function($) {
    
app.view.index = app.view.extend({
    events:{
        'click #backold' : 'backold'
    },
    backold: function(){
        $.cookie('vdadbo','1','7');
        location.href='http://m.baidu.com/video';
    },
    
    template: $("#index_template_footer").html(),
    initialize: function(){
        var me = this;
        me.ec = app.eventCenter ;
        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
        me.hideLoading();
    },

    registerEvents: function(){
        var me = this, ec = me.ec , setTime;
        
        ec.on('pageload', me.onpageload, me);
        
        return false;
    },


    onpageload: function(params){
        var me = this; 
        $.later(function(){
            me.hideLoading();
            /*
            var ev =Backbone.Events;    
            var $img = me.$('#index_view_menu img');
            var imgAry = null,imgAry1,imgAry2,imgAll;
            //0,1,2  3,4,5 6,7,8
            imgAry = _.filter($img, function(val, key){
                var cen = key-1;
                return cen % 3 === 0 ;
            });
            imgAry1 = _.filter($img, function(val, key){
                return key % 3 === 0 ;
            });
            imgAry2 = _.filter($img, function(val, key){
                return (key+1) % 3 === 0 ;
            });
            imgAll = _.zip(imgAry,imgAry1,imgAry2);
            /*
            _.each(imgAll,function(val){
                val=$(val);
            });
            var maxLen = $('#index_view_menu').height() ;
            var minLen =  $('#index_view_menu').offset().top;
            var size = (maxLen)/imgAll.length;
            var winHei = window.innerHeight;
            var trans = function(length){
                var s =length-minLen;
                if(s <0 || s>maxLen)
                    return false;
                return Math.max(Math.min(Math.floor((s)/ size),imgAll.length-1),0);
            }
            ev.on('showimg', function(param,dir){
                var top = param + winHei,
                    shw,hid;
                if(dir > 0){
                    shw = trans(top+size);
                    hid = trans(param-size);
                }else{
                    shw = trans(param-size);
                    hid = trans(top+size);
                }
                
                shw && $(imgAll[shw]).css('opacity','1');
                hid && $(imgAll[hid]).css('opacity','0');
                console.log(shw,hid)
                
            });
            */
        },500);
        $.ajax({                //默认给$.ajax函数传入的参数
            //url:'http://m.baidu.com/static/vs_tuiguang/video_webapp_tuiguang.js',
            url:'http://db-news-fe2.vm.baidu.com:8081/video_android/adwebvstuiguang/',
            dataType:"jsonp",
            success:function(json){             
                var html = _.template(me.template,{list:json});
                $('#index_view_footer').append(html);
            }
        });
    },
    
    autoHeight: function(noGotop){
        scrollTo(0,1);
    }

});

})(Zepto);


;/**
 * 首页头部控制器
 */
(function($) {

app.controller.index.header = app.controller.extend({

    initialize: function(options, parentController){
        // 创建同级别view和model
        // this.model = new app.model.index({}, options); 
        this.view = new app.view.index.header({
            controller: this,
            el:$('#index_view header')
        }); 
        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    }

});

})(Zepto);


;/**
 * 首页热点图类
 */
(function($) {

app.view.index.hot = app.view.extend({
    template:'<div class="carousel"></div><div class="hot-tit"><%=tits %></div><div class="index_view_hot_state"><%= spans %></div>',
    _template: '<a data-query="<%=data_query%>" href="<%= url %>"><img  onload="_showimg(this)" src="<%= img_url%>"/></a>',
    events: {
        'click .carousel>div>a' : 'go'
    },

    initialize: function(options){
        this.hotCarouselEl= $('#index_view_hot .carousel');
        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    render: function(videos){
        videos= videos.toJSON();
        var self= this,
            html,
            spans= [],
            tits= [];
            
            _.each(videos, function(val,key){
                if(key=='index_flash'){
                    videos= val;
                }
            })
            
            
            html= _.map(videos, function(val,key){
                spans.push('<div></div>');
                tits.push('<span>'+ val.title +'</span>');
                val.data_query="s=2022&hotview="+key+'&ti='+val.title;
                return _.template(self._template, val);
            });
            this.$el.append(_.template(self.template, {spans:spans.join(''), tits: tits.join('')}));
            var $titles= this.$('.hot-tit>span');
            var oldtit= $titles.eq(0);
            this.myHot= $('#index_view_hot .carousel').touchCarousel({
                            navList:$('#index_view_hot .index_view_hot_state>div'),
                            listData:html ,
                            isFollow:true ,
                            loop : 5000 ,
                            callback:function(index){
                                var $el = $(this);
                                $el.siblings().removeClass('cur');
                                $el.addClass('cur');
                                oldtit.css('visibility','hidden');
                                oldtit = $titles.eq(index).css('visibility','visible');
                                self.tit = oldtit;
                            }
                        });
            
            
            return this;
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){
        this.collection.on('change', this.render, this);
        this.ec.on('pagebeforechange', this.onpagebeforechange, this);
    },

    onpagebeforechange: function(params){
        var from = params.from, to = params.to, 
        param = params.params, me = this, ec=this.ec;
       if(!me.myHot){
           return ;
       }
        if(from == ec && ec!=to){
            me.myHot.stopLoop();
        } else if(to == ec){
            me.myHot.setLoop();
        }

    },

    go: function(e){
        /*
        var $a= $(e.currentTarget), 
            tit = this.tit,
            url = $a.attr('href');
            $.sendPVStats({
             pv:'v',
             query:{
                 u:url,
                 s:2022,
                 ti:tit.html(),
                 hotview:tit.index()
             },
             event:e,
             callback:function(){
               window.location.href=url
             }
       });
            
        return false;
        */
    }

});

})(Zepto);


;/**
 * 首页栏目列表类
 */
(function($) {

app.view.index.menu = app.view.extend({
    template:$('#index_template_menu').html(),
    
    initialize: function(options){
        this.collection.on('change', this.render, this);
        
        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    render: function(obj){
        var html = '', me = this;
        //配置显示类型
        var query= "p=2512&cu="+location.origin+location.pathname+location.search,
            more_mo="#channel/movie",
            more_tp="#channel/tvplay",
            more_ts="#channel/tvshow",
            more_cm="#channel/comic";
        var conf = {
                movie_hot : {
                        show_key: 'rating',            //显示评分
                        item_title: '电影',
                        more_url:more_mo,
                        data_query: query+more_mo
                    },
                tvplay_hot: {
                        show_key: 'update',
                        item_title: '电视剧',
                        more_url: more_tp,
                        data_query: query+more_tp
                    },
                tvshow_hot: {
                        show_key: 'update',
                        item_title: '综艺',
                        more_url: more_ts,
                        data_query: query+more_ts
                    },
                comic_hot: {
                        show_key: 'update',
                        item_title: '动漫',
                        more_url:more_cm,
                        data_query: query+more_cm
                    }
                };
        obj= obj.toJSON();
        var menus={};
        var menuObj = _.each(obj, function(val, key){
                if(key.indexOf('hot')!=-1){
                    var obj ={}
                    _.extend(obj, conf[key]);
                    obj.videos = val;
                    menus[key]= obj;
                }
            });
        html= _.template(this.template,{menus:menus});

        me.$el.html(html);
        return this;
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){

    },
    onpageload:function(){
    }
});

})(Zepto);


;/**
 * 
 * 首页header View类
 * 
 */
(function($) {

    
      app.view.index.header = app.view.header.extend({
      });

})(Zepto);


;/**
 * 首页Model类
 */
(function($) {

app.model.index = Backbone.Model.extend({

    url: function(){
    //      return 'zhangnan/json/json.php';
        //return '/zhangnan/json/json.php';
        return  'http://cq01-video-rdtest01.vm.baidu.com:8050/adwebindex/';
        return "/video?static=adwebindex/";
        //return "http://db-news-fe2.vm.baidu.com:8081/video_android/adwebindex/";
        //  return '/video?static=webapp-v3-lite/json/json.php'; 
//      return '/video?static=web_iphone/utf8_data/index.js';
    },
    
    sync: $.sync('videoapp')

});

})(Zepto);



;// page toplist
;/**
 * 正文页控制器
 */
(function($) {

app.controller.toplist = app.controller.extend({

    initialize: function(options){
        // 创建同级别view和model
        // this.model = new app.model.page({}, options); 
        var self= this;
        this.firstLoad= true;
        
        this.view = new app.view.toplist({
            controller: this,
            el:$('#toplist_view'),
            model: this.model 
        }); 
        
        //this.setTouch(options);
        
        this.viewheader = new app.view.toplist.header({
            controller: this,
            el:$('#toplist_view header')
            
        });  
      
        // 创建子控制器，这些子控制器都可提前预知
        var opt = _.extend({}, this.options);
        /*
        opt.type = 'comic';
        this.subControllers.pagecomic 
            = new app.controller.toplist.list(opt, this);

        opt.type = 'movie';
        this.subControllers.pagemovie 
            = new app.controller.toplist.list(opt, this);

        opt.type = 'tvplay';
        this.subControllers.pagetvplay 
            = new app.controller.toplist.list(opt, this);

        
        opt.type = 'tvshow';
        this.subControllers.pagetvshow 
            = new app.controller.toplist.list(opt, this);
       */ 
        opt.type = 'all';
        this.subControllers.pageall 
            = new app.controller.toplist.list(opt, this);
        self.addHTML('all');
        
        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    },

    // 事件注册
    registerEvents: function(){
        var ec = this.ec, me = this;         
        ec.on('pagebeforechange', me.onpagebeforechange, me);
        ec.on('pageafterchange', me.onpageafterchange, me);
        ec.on('pageload', me.onpageload, me);
        ec.on('subpageload', me.onsubpageload, me);
        /*
        me.navList.on('click',function(){
            var $el= $(this);
            var $el = $(this) ;
            var type= $el.attr('data-type') || 'all';
            $.later(function(){
                me.myTouchScroll.goIndex(me.getNavIndex(type),500);
            })
            return false;
        })
        */
    },

    onpagebeforechange: function(params){
        var from = params.from, to = params.to, 
            param = params.params, me = this;
            if(to==me){
                $.later(function(){
                    me.view.$el.show();
                });
            }
    },

    onpageafterchange: function(params){
        var from = params.from, to = params.to, 
            param = params.params, me = this;
        me.ispagecur = true;
        if(from == me && to!==me){
            me.ispagecur =false;
            $.later(function(){
                me.view.$el.hide();
            })
        }else if(to===me && from!==me){
            
        }
        
        if(to == me  && from ==me){
            me.myTouchScroll.goIndex(me.getNavIndex(param.type),500);
        };
    },
    
    onsubpageload: function(){
        var me= this, ec= this.ec;
        if(me.firstLoad){
            me.firstLoad = false;
            me.view.hideLoading();
            ec.trigger('pageload');
        }
    },
    
   addHTML : function(type){
       var ec = this.ec, me = this  ;       
       subController= this.subControllers['page'+type];
       
       ec.trigger('loadpage'+type, {
           }
       ); 
       
        //return subController.view.el;
    },
    
    setTouch: function(param){
        var self= this, ec= self.ec, curIndex=self.getNavIndex(param.type);
        $load = self.view.$('.top-loading');
        self.navList= $('#toplist_view_nav>a');
        self.myTouchScroll= $('#toplist_view_list').touchCarousel({
            navList:self.navList,
            listData:function(){
                var $el = $(this) ;
                var type= $el.attr('data-type') || 'all';
                return self.addHTML(type);
            },
            isFollow:false,
            curIndex:curIndex,
            callback:function(){
                 $load.hide();
                 var $el = $(this) , type= $el.attr('data-type'), addloadflag;
                 self.toHash($el);
                 
                 addloadflag= self.subControllers['page'+ type].addloadflag;
                 $.later(function(){
                     ec.trigger('subpagechange',{type:type, addloadflag: addloadflag});
                 })
            },
            beforecallback:function(){
                var $el = $(this);
                $el.siblings().removeClass('cur');
                 $el.addClass('cur');
                    if(!this.firstElementChild){
            //          $load.show();
                    }
            }
        });
    },
    
    getNavIndex: function(type){
        var i= $('#top_'+type).index();
        return i ==-1 ? 0 : i;
    },
    
    toHash: function($el){
        if(!this.ispagecur)
            return false;
        var url = $el.attr('href'),
        route = encodeURIComponent(url);
        Backbone.history.navigate(url, {trigger:false});
    }
    
});

})(Zepto);


;/**
 * 正文页控制器
 */
(function($) {

app.controller.toplist.list = app.controller.extend({

    initialize: function(options){

        this.firstLoad = true;
        this.addloadflag = true;
        
        // 创建同级别view和model
        options.type= 'top_'+options.type;   //top_all为了和数据请求参数保持一致;
        this.model = new app.model.toplist.list(options); 

        var opt = _.extend({
                controller: this,
                model: this.model ,
                el: $('#toplist_view_list')
            }, options);
        
        this.view = new app.view.toplist.list(opt); 

        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    },

    // 事件注册
    registerEvents: function(){
        var ec = this.ec, me = this, type= me.get('type');         
        ec.on('pageafterchange', me.onpageafterchange, me);
        ec.on('loadpage'+type, me.onpageaddhtml, me);
        me.model.on('change:end', me.onfetch, me);
        me.model.on('subpageloadfailed', me.onsubpageloadfailed, me);
    },

    onpageafterchange: function(params){
    },
    
    onsubpageloadfailed: function(params){
        this.addloadflag = false;
        this.ec.trigger('subpageloadfailed');
    },
    
    onpageaddhtml: function(param){
        var me = this;
        if(me.firstLoad){
            me.model.setParam(param); 
            me.firstLoad= false;
        }else if(param.add===true){
            me.model.setParam(param); 
        }
    },
    
    onfetch: function(){
        var ec= this.ec;
          this.model.fetch({
             add: true,
            dataType:'jsonp',
            success: function(data,obj){
            }, 
            error: function(){
                ec.trigger('subpageloadfailed');
            }
        });
    },
    
    get: function(key){
        return this.options[key];
    }
});

})(Zepto);


;/**
 * 正文页View类
 */
(function($) {

app.view.toplist = app.view.extend({

    events: {},

    initialize: function(){
        var me = this;
        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    render: function(model){
        return this;
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){
        var me = this, ec = me.ec;
        ec.on('pageload', me.onpageload, me);
        //ec.on('subpagechange', me.onsubpagechange, me);
        this.curPage={type:'all'};
        ec.on('subpageload', me.onsubpageload, me);
        ec.on('subpageloadfailed', me.onsubpageloadfailed, me);
        
    },

    onpageload: function(params){
         this.setRefresh();
    },
    
   onsubpagechange: function(param){
      var curPage= this.curPage= param, me= this, refresh= me.myRefresh; 
      if(refresh && this.loalCacllback){
               if(curPage.addloadflag){
               refresh.setLoadEndText(null , true)
               me.loalCacllback();
           }else{ 
               refresh.setLoadEndText('全部加载完毕' , false)
           }   

      }
      $.later(function(){
          scrollTo(0,1);
      })
   },   
   onsubpageload: function(jsonp){
       var me= this;
           if(me.loalCacllback){
                me.loalCacllback();
                me.myRefresh.setStatus(true);
           }
   },
   onsubpageloadfailed: function(){
        var me= this;
        
        me.myRefresh.setLoadEndText('全部加载完毕', false)
   },
   setRefresh: function(){
      var me= this , ec= me.ec, 
        refresh =me.myRefresh =$.ui.refresh({
            container: '#toplist_view_scroller',
            direction:'up',
            loadingText: '给力加载中...',
            type:'pullup', //pullup or click
            onScrollEnd:function (e) {
                var num;
                var self= this;
                $.later(function(){
                    if(self.y<-200){
                        me.$gotopBtn.css('visibility','visible')
                    }else{
                        me.$gotopBtn.css('visibility','hidden')
                    }       
                },100)
          
            },
            onReady:function (callback) {
                if(!me.loadCallback)
                    me.loalCacllback= callback;
                    ec.trigger('loadpage'+me.curPage.type, {add:true, time:Date.now()});
            }
        });
       
   }    
});

})(Zepto);


;/**
 * 正文页正文View类
 */
(function($) {

app.view.toplist.list = app.view.extend({
    template:'<a data-num="2504" href="http://m.baidu.com/video?fr=toplist&word=<%=encodeURIComponent(title) %>" class="cen <%=trend%>">\
        <div class="tit"><%=index>3 ? index : "&nbsp;&nbsp;" %>&nbsp;&nbsp;&nbsp;&nbsp;<span><%=title %></span></div>\
        </a>',
    events: {
    },

    initialize: function(options){

        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    render: function(model){
        
        var me = this;
        var html = this.getHTML(model.get('videos')),t= 300-(Date.now()- model.get('time'));
        if(me.ec.firstLoad){
            me.$el.html('');
        }
          
        $.later(function(){
           me.$el.append(html);
          me.ec.trigger('subpageload');
        }, t)
        return this;
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){
        /*
        this.ec.on('pagebeforechange', this.onpagebeforechange, this);
        this.ec.on('pageafterchange', this.onpageafterchange, this);
        this.ec.on('pageload', this.onpageload, this);
       */ 
        
        this.model.on('change:videos', this.render, this);
    },

    onpagebeforechange: function(params){

    },

    onpageafterchange: function(params){
    },
    

    onpageload: function(params){
    },

    getHTML: function(ary){
        var temp= this.template ,
        start= this.model.get('beg');
        var htmlAry=_.map(ary,function(o,index){
            var trend=o.status_day;
            o.trend= (trend==0 ? "normal" : (trend==2 ? "drop" : "rise")) ;
            o.index=index+1+start; 
            return _.template(temp,o);
        })
        return htmlAry.join('');
    }

});

})(Zepto);


;/**
 * 频道页头部View类
 */
(function($) {

  app.view.toplist.header = app.view.header.extend({
      
  });

})(Zepto);


;/**
 * 正文页Model类
 */
(function($) {

app.model.toplist = {}; 

})(Zepto);


;/**
 * 正文Model类
 */
(function($) {

app.model.toplist.list = Backbone.Model.extend({
    
    defaults: {
        beg: 0,
        end: 0,
        step: 10,
        maxEnd: 100
    },

    initialize: function(attributes, options){
        this.ec = app.eventCenter;
 
     },
    url: function(){
       return this.urlroot+this.getParam();
     },
     
     urlroot: "http://app.video.baidu.com/toplistiphweb/?",
    
    getParam: function(){
        return $.param({
            beg: this.get('beg'),
            end: this.get('end'),
            type:this.get('type')
        })
    },
    
    setParam:function(param){
        var ec= this.ec;
        if(!param || !param.beg || param.end){
            var beg = this.get('end'), end= beg+ this.get('step');
            param.beg= beg;
            param.end= end;
        }
        
        if(param.end > this.get('maxEnd'))
            this.trigger('subpageloadfailed');
        else
            this.set(param);
    },
    
    sync: $.sync('videoapp')
});

})(Zepto);



;// page feedback
;/**
 * feedback页控制器
 */
(function($) {

    app.controller.feedback = app.controller.extend({

    initialize: function(options, parentController){
        // 创建同级别view和model
        // this.model = new app.model.index({}, options); 
        var me= this;
        this.firstLoad =true;
        
        var $el=$('#feedback_view');
        this.view= new app.view.feedback({
            controller : this,
            el: $el
        });
        this.viewhead= new app.view.feedback.header({
            controller : this,
            el: $el.find('header')
        });
        this.view.hideLoading();
        /*
        me.scrollerWrapper=$('#app_view_wrapper');
        me.myScroll = new iScroll('app_view_wrapper', {
            useTransition: true,
            speedScale:1,
            topOffset: 0,
            vScrollbar:false,
            onRefresh:function(){
            },
            onBeforeScrollMove :function(){
                //distX和distY是本次当前鼠标距离touchstart的距离;如坐标，上↑为负，左边负

            },  
            onScrollStart:function(){

            },
            onScrollMove:function(){
    
            },
            onScrollEnd: function () {
            }
         });
        
        me.autoHeight();
        addEventListener('onorientationchange' in window ? 'orientationchange' : 'resize', function(){
            me.autoHeight();
        });
*/
        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    },

    // 事件注册
    registerEvents: function(){
        var ec = this.ec, me = this;         
    }
   });

})(Zepto);
;/**
 * 频道页头部View类
 */
(function($) {
    
    /*dialog*/
    var dialog=function (text, yesfoo, nofoo) {
        var d = $.ui.dialog({
                    width:288,
                    closeBtn:false
                }), dEl = d.widget();
                
        d.content('<div class="login-dialog"><h2>'+ text.title +'</h2>' +
                '<p>'+text.detail+'</p>' +
                '<div class="btns"><a class="no  ui-button">'+text.no+'</a><a class="yes ui-button">'+text.yes+'</a></div>' +
                '</div>');


        dEl.find('.btns > a.no').on('click',function () {
                nofoo && nofoo();
                d.hide();
            }
        )
        
        dEl.find('.btns > a').on('touchstart',function(){
            $(this).addClass('ui-button-hover');
        }).on('touchend',function(){
            $(this).removeClass('ui-button-hover');
        });
        
        dEl.find('.btns > a.yes').on('click',function () {
             d.hide();
                yesfoo && yesfoo();
            }
         );
           return d;
    };  
    
    
  app.view.feedback = app.view.extend({
            
   initialize: function(options){
      var me  = this;
      me.$textareaer = me.$('.input_detail');
      me.$inputer = me.$('.tel_detail');
      me.$submiter = me.$('.ui-toolbar-submit');
      me.$former = me.$('#backform');
      me.$postpage = me.$('#postpage');
      me.$postdata = me.$('#postdata');
      // 调用父类
      app.view.prototype.initialize.apply(this, arguments);

    },

    // 全局事件注册，子类重写之
    registerEvents: function(){
        var ec = this.ec, me = this,  eventfoo; 
        ec.on('pageafterchange', me.onpageafterchange, me);
        
        eventfoo = function(e){
            $.later(function(){
                scrollTo(0,1);
            })
            if(e.type=='focus'){
                me.hideText(e);
            }else{
                me.showText(e);
            }
            
        }
        me.$textareaer.on('focus blur', eventfoo)
        me.$inputer.on('focus blur', eventfoo);
        me.$postpage.on('load', function(){
                me.successdialog().show();
                Backbone.history.navigate('#feedback/successmsg', false);
        });
        
        me.$submiter.on('click',function(e){
            me.submit(e);
        })
        
    },
    
    submit :function(e){
        var obj , me = this;
        if(obj = me.checkform()){
            var json = JSON.stringify(obj);
            me.$postdata.val(json);
            me.$former[0].submit();
        }else{
            Backbone.history.navigate('#feedback/errormsg', false);
            me.errordialog().show();
        }
    },
    
    onpageafterchange: function(param){
        var me =this , to = param.to, from = param.from;
        if(me.ec==to){
            //me.successdialog().hide();
            //me.errordialog().hide();
        }
    },
    
    hideText: function(e){
        var el= e.currentTarget;
        el.className='focus';
        if( el.value.trim()==el.defaultValue){
            el.value ='';
        }
    },
    
    showText: function(e){
        var el= e.currentTarget, reg = /^\s*$/g;
        if(reg.test(el.value)){
            el.className='';
            el.value =el.defaultValue;
        }
    },
    
    checkform: function(){
        var me = this,
            text =me.$textareaer[0] ,
            textval =me.$textareaer[0].value.trim() ,
            input =me.$inputer[0] ,
            inputval =me.$inputer[0].value.trim(),
            inputval = inputval == input.defaultValue ? '' : inputval,
        checktext = textval != text.defaultValue && textval.length>3  ,
        checkinput = true;//inputval != input.defaultValue && textval.length>6  ;
        if(checkinput && checktext)
            return {
                msg:textval, 
                contact: inputval,
                devices :'webapp_android',
                version_app: $.os.version
            }
        else
            return false;
    },
    
    successdialog: function(){
        var me = this;
        return arguments.dialog || (arguments.dialog = dialog({
            title:'提示',
            detail: '提交成功，感谢您的反馈！',
            no: '再提一个',
            yes: '好的'
        } , function(){
            Backbone.history.navigate('#index', true);
        }, function(){
            Backbone.history.navigate('#feedback', false);
            $('#text_detail').focus().val('');
        }) ) ;
    },
    
    errordialog:function(){
        var me = this;
        return arguments.dialog || (arguments.dialog = dialog({
                title:'提示',
                detail: '再多写几个字吧？这样我们可以更懂你~',
                no: '不写了',
                yes: '好的'
            } , function(){
                Backbone.history.navigate('#feedback', false);
                me.noMessage = false;
                $('#text_detail').focus();
            }, function(){
                Backbone.history.navigate('#index', true);
            }) );   
        }

  });


    
    
    
    
})(Zepto);


;/**
 * 
 * 首页header View类
 * 
 */
(function($) {

app.view.feedback.header = app.view.extend({

    events: {},

    initialize: function(){
        var me = this;

        // 初始化工具栏和Suggestion
        me.initToolbar();

        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    initToolbar: function(){
        var me = this;

        me.toolBar = $.ui.vs_toolbar(
            $('.ui-toolbar-container', me.$el), {
                // instanceId: 'blue',
                // isTitleClickable: true,
                isNewPageProduct: false,
                // 检索按钮点击回调函数
                onSendButtonClick: function(e){
                    e.preventDefault();
                    $.sendPVStats({
                        pv:'v',
                        query:{
                            u:location.href,
                            p: 2506,
                            txt:'feedbacksubmit',
                        }
                    });
                      me.ec.view.submit(e); 
                },
                // 返回按钮点击回调函数
                onBackButtonClick:function(){
                    Backbone.history.navigate('#index', true);
                  }
              }
        );
    }

});

})(Zepto);



;// page channel
;/**
 * 频道页控制器
 */
(function($) {

  app.controller.channel = app.controller.extend({

    initialize: function(options, parentController){
      if(!options.type||options.type==='undefined'){
        options.type = 'tvplay';
      }
      this.view = new app.view.channel({
        controller: this,
        el:$('#channel_view')
      });

      this.header = new app.view.channel.header({
        controller:this,
        el:$('#channel_view header')
      });

      this.subnav = new app.view.channel.subnav({
         controller:this,
         collection:new app.collection.channel.subnav(),
         currentChannel:options.type
        }
      )

      var opt = _.extend({}, this.options);
      opt.type = 'tvplay';
      this.subControllers.tvplay
        = new app.controller.channel.list(opt, this);

      opt.type = 'movie';
      this.subControllers.movie
        = new app.controller.channel.list(opt, this);

      opt.type = 'comic';
      this.subControllers.comic
        = new app.controller.channel.list(opt, this);

      opt.type = 'tvshow';
      this.subControllers.tvshow
        = new app.controller.channel.list(opt, this);

      // 调用父类
      app.controller.prototype.initialize.apply(this, arguments);
    }

    // 事件注册
//    registerEvents: function(){
//      var ec = this.ec, me = this;
//
//      ec.on('pagebeforechange', me.onpagebeforechange, me);
//    },
//
//    onpagebeforechange: function(params){
//
//    }
  });

})(Zepto);



;/**
 * 频道页列表控制器
 */
(function($) {

  app.controller.channel.list = app.controller.extend({
    initialize: function(options, parentController){

      this.firstLoad = true;
      this.videoType = options.type;

      var opt = _.extend({controller: this}, options);
      this.model = new app.model.channel.list(opt);

      this.view = new app.view.channel.list({
        controller: this,
        model:this.model,
        el:null
      });

      // 调用父类
      app.controller.prototype.initialize.apply(this, arguments);
    },

    // 事件注册
    registerEvents: function(){
      var t = this, ec = t.ec;

      ec.on('pageafterchange', t.onpageafterchange, t);
      ec.on('requestmoredata',t.onrequestmoredata,t);
      ec.on('cleardata',t.oncleardata,t);
    },
    oncleardata:function(params){
      var me = this;
      if(params.videoType === me.videoType){
        me.model.args.beg = 0 - me.model.args.pageSplit;
        me.model.args.end = me.model.args.beg + me.model.args.pageSplit;
      }
    },
    onrequestmoredata:function(params){
      var t = this, ec = t.ec;
//      if(params[0]===t.videoType){
      if(params.videoType === t.videoType){
        //t.model.args.page++;
        if(params.otherparams)t.model.args.otherparams = params.otherparams;
        t.model.args.beg += t.model.args.pageSplit;
        t.model.args.end += t.model.args.pageSplit;
  
        t.model.fetch({
          dataType:'jsonp',
          success: function(){
       
            //ec.trigger('moredataloaded','#channel/'+t.videoType+'/'+ t.model.args.page);
            ec.trigger('moredataloaded','#channel/'+t.videoType+'/'+ t.model.args.beg);
            //params[1]();
            if(params.callback)params.callback();
          },
          error: function(){
            ec.trigger('moredataloaded','failure');
            //params[1]();
            if(params.callback)params.callback();
          }
        });
      }
    },
    onpageafterchange: function(params){
      var t = this, ec = t.ec;

      if(t.firstLoad){
        this.model.fetch({
          dataType:'jsonp',
          success: function(){
            ec.trigger('singlechannelready',t.videoType);
          },
          error: function(){
           ec.trigger('pageloadfailed');
          }
        });
      }
      t.firstLoad = false;
    }
  });

})(Zepto);



;/**
 * 频道页View类
 */
(function($) {

  app.view.channel = app.view.extend({

//    events: {},

    initialize: function(){
      var t = this;
      t.ec = app.eventCenter;
      //t.currentChannel;
      t.readyChannel = {};
      //t.$loading = $('.loading-img');
      //t.container = $('#channel_view');
      //t.scrollerWrapper = $('#channel_view_wrapper');

      t.refreshContainer = $('#channel_view_scroller');
      t.refresh = $.ui.refresh({
        container: t.refreshContainer,
        type:'pullup', //pullup or click
        loadingText:'给力加载中...',
        clickText:'点击加载更多',
        onReady:function(callback) {
          //t.ec.trigger('requestmoredata', [t.currentChannel,callback]);
           t.ec.trigger('requestmoredata', {
           videoType:t.currentChannel,
           otherparams:t.otherparams,
           callback:callback
        });
        }
      });

      // 调用父类
      app.view.prototype.initialize.apply(this, arguments);
      //t.$el.hide();
      //t.scrollerWrapper.height($(window).height() - 45);
      //t.showLoading(t.refreshContainer);
    },

    render: function(){
      return this;
    },

    registerEvents: function(){
      var t = this, ec = t.ec;
      //ec.on('pageload', t.onpageload, t);
      ec.on('pagebeforechange', t.onpagebeforechange, t);
      ec.on('pageafterchange', t.onpageafterchange, t);
      ec.on('channelchanged',t.onchannelchanged,t);
      ec.on('singlechannelready',t.onsinglechannelready,t);
      ec.on('moredataloaded', t.onmoredataloaded,t);
      ec.on('requestdatawithrefresh', t.onrequestdatawithrefresh,t);
    },
    onrequestdatawithrefresh:function(params){
      var me = this;
      me.otherparams = params.otherparams;
      me.refresh._tapHandler();
    },
    onmoredataloaded:function(params){
      Backbone.history.navigate(params);
    },
    onsinglechannelready:function(params){
      var t = this;
      t.readyChannel[params] = 1;
    },
    onchannelchanged: function(params){
      var t = this;

      var clock = setInterval(function(){
        if(t.readyChannel[params]===1){
          t.currentChannel = params;
          clearInterval(clock);
          //t.scrollerWrapper.height($(window).height() - 45);
          t.hideLoading();
        }
        else{
          //t.showLoading(t.scrollerWrapper);
        }
      }, 100);

    },

    onpagebeforechange: function(params){
        var to = params.to,
          t = this,
          pageController = t.getPageController();
        t.currentChannel = params.params.type;

        if(to === pageController){
          t.ec.trigger('channelchanging',t.currentChannel);
        }
    },

    onpageafterchange: function(params){
      var from = params.from, to = params.to,
        t = this,
        pageController = t.getPageController();

      // 起始活动页晚隐藏，确保切换效果
      if(from === pageController && to !== from){
        t.$el.hide();
      }
      else{
        //$.pageAdapter.autoHeight();
        t.$el.show();
      }
    }

  });

})(Zepto);



;/**
 * 频道页视频列表View类
 */
(function($) {

  app.view.channel.list = app.view.extend({
    STATISTIC:{
      woman: "2024",
      movie: "2017",
      tvplay: "2016",
      tvshow: "2015",
      music: "2014",
      amuse: "2013",
      comic: "2012",
      info: "2011",
      sport: "20rt",
      toplist:"2504"
    },
    tpl:$('#template_channel_list').text(),
    initialize: function(options){
      this.videoType = options.controller.videoType;
      this.s = this.STATISTIC[this.videoType];

      this.model.on('change', this.render, this);
      this.el =
        $('<div id="channel_view_'+
            this.videoType  + '_list" class="channel-view-list" data-stype="'+this.s+'">').insertBefore('#channel_view_scroller .ui-refresh');
      this.el.on('click','.channel-view-list-item',this.go);

      app.view.prototype.initialize.apply(this, arguments);
    },

    render: function(model){
      //var data = model.toJSON()['channel_'+this.videoType].videos;
      var data = model.toJSON().video_list.videos;
      var i = 0,count = data.length;

      for(;i<count;i++){
        data[i].url += '&fru=channel/'+this.videoType;
        switch (this.videoType){
          case 'tvplay':
          case 'comic':
            data[i].info = '更新至'+data[i].update;
            break;
          case 'movie':
            if(data[i].rating === ''){
              data[i].rating = '暂无';
            }
            data[i].info = '评分：'+ data[i].rating;
            break;
          case 'tvshow':
            data[i].info = data[i].update+'期';
            break;
        }
      }
      var ele = $(_.template(this.tpl, {list:data}));
      this.el.append(ele);
      return this;
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){
      //this.ec.on('pagebeforechange', this.onpagebeforechange, this);
      //this.ec.on('pageload', this.onpageload, this);
      this.ec.on('channelchanging',this.onchannelchanging,this);
      this.ec.on('cleardata',this.oncleardata,this);
    },

    oncleardata:function(params){
      if(params.videoType===this.videoType){
        this.el.html('');
      }
    },
    onchannelchanging:function(type){
      this.el.toggle(type===this.videoType);
      if(type===this.videoType){
        this.ec.trigger('channelchanged',this.videoType);
        Backbone.history.navigate('channel/'+this.videoType);
      }
    },
//    onpagebeforechange: function(params){
//      //this.$el.append(this.$loading);
//    },

    go: function(e){
      var me = $(this);
      var url = me.data('url');
      return $.sendPVStats({
        pv:'v',
        query:{
          s:me.parent().data('stype'),
          ti:me.find('.channel-view-list-item-title').text(),
          u:url
        },
        event:e,
        callback:function(){
          window.location = url;
        }
      });
    }

  });

})(Zepto);



;/**
 * 频道页头部View类
 */
(function($) {

  var _super = app.view.header.prototype;
  app.view.channel.header = app.view.header.extend({

    initialize: function(options){
      var me  = this;
      /*
      me.showSearch = false;
      me.$form = me.$('.search-form');
      me.$searchInput = me.$('.search-input input');
      me.initToolbar();
      me.initSuggestion();
      */
      me.$title = me.$('.ui-toolbar-title');
      _super.initialize.apply(me, arguments);
    },

    // 全局事件注册，子类重写之
    registerEvents: function(){
        var me = this;
        _super.registerEvents.apply(me, arguments);
      me.ec.on('pagebeforechange', this.onpagebeforechange, this);
    },

    onpagebeforechange: function(params){
      var to = params.to,me = this;
      var title ;
      if(to===me.controller){
        me.currentChannel = params.params.type;
        switch (me.currentChannel){
            case "movie":
                title = "电影";
                break;
            case "tvplay":
                title = "电视剧";
                break;
            case "comic":
                title = "动漫";
                break;
            case "tvshow":
                title = "综艺";
                break;
        }
        me.$title.text(title);
      }
    }
  });

})(Zepto);


;/**
 * 频道页二级筛选View类
 */
(function($) {

  app.view.channel.subnav = app.view.extend({

    initialize: function(options){

        var me = this;

        me.currentChannel = options.currentChannel;
        me.toggleBtn = $('#subnav_toggle');
        me.navArea = $('#subnav_area');
        me.navPath = $('#subnav_path');
        me.navList = {};
        me.navLoading = $('<div>筛选条件加载中...</div><span class="bg"></span>').appendTo(me.navArea);

        me.toggleBtn.click(function(){
            if(me.navArea.css('display') === 'none'){
              me.navArea.show();
              me.toggleBtn.addClass('up');
              if(!me.navList[me.currentChannel]){
                me.navLoading.addClass('cur');
                for(var i = 0,model;model = me.collection.models[i++];){
                  if(model.id === me.currentChannel){
                    model.fetch({
                      dataType:'jsonp',
                      success: function(m){
                        me.navLoading.removeClass('cur');
                        me.navList[m.id] = $('<div></div>').appendTo(me.navArea).addClass('cur');
                        me.navList[m.id].navigators = [];
                        me.navList[m.id].parent = me;
                        me.navList[m.id].firstLoad = 0;
                        for(var j = 0,navEntry,content=[{text:'全部',url:'javascript:;',term:''}];
                            navEntry = m.toJSON().conds[j++];){
                          for(var k = 0,navEntryItem;navEntryItem = navEntry.values[k++];){
                            content[k] = {text:navEntryItem.title,url:'javascript:;',term:navEntryItem.term};
                          }
                          me.navList[m.id].firstLoad++;
                          me.navList[m.id].navigators.push($.ui.navigator({
                            container:me.navList[m.id],
                            content:(function(){
                              var temp = content.slice(0);
                              temp.field = navEntry.field;
                              return temp;
                            })(),
                            ontabselect:me.ontabselect
                          }));
                        }
                      },
                      error: function(){
                      }
                    });
                  }
                }
              }
              else{
                me.navList[me.currentChannel].addClass('cur');
              }
            }
          else{
              me.navArea.hide();
              me.toggleBtn.removeClass('up');
              me.navLoading.removeClass('cur');
            }

      });
      app.view.prototype.initialize.apply(me, arguments);
    },
    ontabselect:function(){
      var navList = this.data('container');
      if(navList.firstLoad !== 0){
        navList.firstLoad--;
        return;
      }
      var nav = navList.navigators;
      var me = navList.parent;
      var paramsString = [];
      var pathString = [];
      for(var i = 0, n,c;n = nav[i++];){
        c = n.data('content');
        pathString.push(c[n.data('lastTabIndex')].text);
        paramsString.push(c.field + '=' + encodeURIComponent(c[n.data('lastTabIndex')].term));
      }
      pathString = pathString.join(' / ');
      me.navPath.html(pathString);
      paramsString = paramsString.join('&');
      me.ec.trigger('cleardata',{videoType:me.currentChannel});
      me.ec.trigger('requestdatawithrefresh',{otherparams:paramsString});

    },
    render: function(){

      return this;
    },

    registerEvents: function(){
      this.ec.on('pagebeforechange', this.onpagebeforechange, this);
      //this.ec.on('pageload', this.onpageload, this);
    },

    onpagebeforechange: function(params){
      var to = params.to,
        me = this,
        pageController = me.getPageController();

      if(to === pageController && me.navList[me.currentChannel]){
        me.navList[me.currentChannel].removeClass('cur');
        me.navArea.hide();
        me.toggleBtn.removeClass('up');
        me.navLoading.removeClass('cur');
        me.navPath.html('全部');
        me.currentChannel = params.params.type;
        //me.navList[me.currentChannel].addClass('cur');
      }
    }


  });

})(Zepto);



;/**
 * 频道页Model类
 */
(function($) {

  app.model.channel = Backbone.Model.extend({

    initialize: function(attributes, options){
      this.ec = app.eventCenter;
    },

    url: function(){
      return '';
    }
  });
  app.collection.channel = Backbone.Collection.extend({

    initialize: function(models,options){
      this.ec = app.eventCenter;
    },

    url: function(){
      return '';
    }

  });
})(Zepto);



;/**
 * 频道页列表Model类
 */
(function($) {

  app.model.channel.list = Backbone.Model.extend({

    /*initialize: function(options){
      this.ec = app.eventCenter;

      this.args = options;
      this.args.type || (this.args.type = 'tvplay');
      this.args.act || (this.args.act = 'json');
      this.args.page || (this.args.page = 1);
    },

    urlTemplate: function(){
      //video?static=web_iphone/json_data/iph_channel/json/comic/1.js
      return '/video?static=web_iphone/utf8_data/iph_channel/<%=act%>/<%=type%>/<%=page%>.js';
    },*/
    initialize: function(options){
      this.args = options;
      this.args.type || (this.args.type = 'tvplay');
      this.args.beg || (this.args.beg = 0);
      this.args.end || (this.args.end = 11);
      this.args.pageSplit || (this.args.pageSplit = 12);
      this.args.otherparams || (this.args.otherparams = '');
    },

    urlTemplate: function(){
      //video?static=web_iphone/json_data/iph_channel/json/comic/1.js
      //return '/video?static=web_iphone/utf8_data/iph_channel/<%=act%>/<%=type%>/<%=page%>.js';
      //http://app.video.baidu.com/adwebmovie/?type=**&area=**&actor=**&beg=**&end=**
      //http://db-news-fe2.vm.baidu.com:8081/video_android/adwebmovie/?type=**&area=**&actor=**&beg=**&end=**
      //http://cq01-video-rdtest01.vm.baidu.com:8050/adwebmovie/?beg=20&end=40&callback=agc
      return 'http://cq01-video-rdtest01.vm.baidu.com:8050/adweb<%=type%>/?beg=<%=beg%>&end=<%=end%>&<%=otherparams%>';
    },

    url: function(){
      return _.template(this.urlTemplate(), this.args);
    },
    sync:$.sync('videoapp')
  });

})(Zepto);

;/**
 * 频道页二级筛选Model类
 */
(function($) {

  app.model.channel.subnav = Backbone.Model.extend({

    initialize: function(options){
      var me = this;

      //http://cq01-video-rdtest01.vm.baidu.com:8050/conds/?worktype=adwebmovie
      me.url = 'http://cq01-video-rdtest01.vm.baidu.com:8050/conds/?worktype=adweb'+options.type;
      //this.url = 'http://app.video.baidu.com/adweb'+options.type+'conds/';

    },
    idAttribute:'type',
    sync:$.sync('videoapp')
  });
  app.collection.channel.subnav = Backbone.Collection.extend({
    initialize: function(){
        this.add([{
          type:'tvplay'
        },{
          type:'movie'
        },{
          type:'tvshow'
        },{
          type:'comic'
        }]);
    },
    model:app.model.channel.subnav
  });

})(Zepto);

;// page product
;/**
 * 产品列表页控制器
 */
(function($) {

app.controller.product = app.controller.extend({

    initialize: function(options, parentController){
        // 创建同级别view和model
        // this.model = new app.model.product({}, options); 
        this.view = new app.view.product({
            controller: this,
            el:$('#product_view')
        }); 


        // 创建子控制器，这些子控制器都可提前预知
        var opt = _.extend({}, this.options);
        this.subControllers.header 
            = new app.controller.product.header(opt, this);

        this.subControllers.list 
            = new app.controller.product.list(opt, this);

        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    }

});

})(Zepto);


;/**
 * 产品列表页头部控制器
 */
(function($) {

app.controller.product.header = app.controller.extend({

    initialize: function(options, parentController){
        // 创建同级别view和model
        // this.model = new app.model.index({}, options); 
        this.view = new app.view.product.header({
            controller: this,
            el:$('#product_view header')
        }); 

        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    }

});

})(Zepto);


;/**
 * 产品列表控制器
 */
(function($) {

app.controller.product.list = app.controller.extend({

    initialize: function(options, parentController){
        // 创建同级别view和model
        // this.model = new app.model.product({}, options); 
        this.view = new app.view.product.list({
            controller: this,
            el:$('#product_view .product-view-list')
        }); 

        // 调用父类
        app.controller.prototype.initialize.apply(this, arguments);
    }

});

})(Zepto);


;
/**
 * 产品列表页View类
 */
(function($) {

app.view.product = app.view.extend({

    events: {},

    initialize: function(){
        var me = this;

        me.scrollerWrapper = $('#product_view_wrapper');
        me.refreshContainer = $('#product_view_scroller');
        /*
        me.refresh = $.ui.refresh('#product_view_scroller .ui-refresh',{
            container: me.refreshContainer 
        });

*/
        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);

        // me.$el.hide();
        // me.showLoading(me.scrollerWrapper);
    },

    render: function(){
        return this;
    },

    registerEvents: function(){
        var me = this, ec = me.ec;
        ec.on('pageload', me.onpageload, me);
        ec.on('pageafterchange', me.refreshHeight, me);
        window.addEventListener('orientationchange', function(e){
            $.later(function(){me.refreshHeight();}); 
        });

    },

    onpageload: function(params){
        var me = this; 
        me.refreshHeight();
         me.hideLoading();
    },

    refreshHeight: function(){
        this.$el.css('min-height',window.innerHeight);
        /*
        var me = this; 

        // isLoaded前的scrollTo不仅徒劳，而且页面来回跳动
        window.scrollTo(0, 0);
        me.scrollerWrapper.height($(window).height() - 44);
        me.refresh.data('iscroll').refresh();
        */
    }

});

})(Zepto);


;/**
 * 产品列表页header View类
 */
(function($) {

app.view.product.header = app.view.extend({

    events: {},

    initialize: function(){
        var me = this;

        // 初始化工具栏和Suggestion
        me.initToolbar();

        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
    },

    render: function(){
        return this;
    },

    initToolbar: function(){
        var me = this;

        me.toolBar = $.ui.vs_toolbar(
            $('.ui-toolbar-container', me.$el), {
                // instanceId: 'blue',
                // isTitleClickable: true,
                isNewPageProduct: false,
                // 返回按钮点击回调函数
                onBackButtonClick: function(e){
                   // history.back(); 
                   Backbone.history.navigate('index', {trigger:true});
                },
                onSwipeUp: function(){
                    scrollTo(0,1);
                }
            }
        );
    },

});

})(Zepto);


;/**
 * 产品列表页list  View类
 */
(function($) {
    
    var transTab={
            '网页':'home',
            '图片':'image',
            '新闻':'news',
            '视频':'video',
            '更多':'more',
            '小说':'novel',
            '贴吧':'tieba',
            '知道':'know',
            '文库':'wenku',
            '百科':'baike',
            '空间':'room',
            '音乐':'music',
            '身边':'3rd_party',
            '旅游':'lvyou',
            '地图':'map',
            '应用':'app',
    };
app.view.product.list = app.view.extend({

    events: {
       // 'click .product-view-list-item-icon':'oniconclick'
    },

    initialize: function(){
        var me = this;

        // 调用父类
        app.view.prototype.initialize.apply(this, arguments);
        me.render();
    },

    render: function(){
        var me = this,
            tpl = $('#template_product_list').text(),
            productListData = $.ui.productlist('video');
        
        me.$el.append(_.template(tpl, {list: productListData}));
        me.ec.trigger('pageload');
        return this;
    },
/*
    oniconclick: function(e){
        var $target = $(e.target),
            url = $target.data('url'),
            txt = $target[0].nextElementSibling.innerText.replace(/\s+/g,''),
            s= transTab[txt] || 'other';
        $.sendPVStats({
             pv:'v',
             query:{
                 u:url,
                 s:s
             },
             event:e,
             callback:function(){
              window.location.href=url
             }
       });
    }
 */   

});

})(Zepto);



;/**
 * APP初始化入口
 */
(function($, app) {

app.init();

})(Zepto, app);    
