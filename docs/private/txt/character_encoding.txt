字符编码相关专题



修订内容    修订人  修订时间
初稿    胡大民  2010/12/11
添加GBK编码 胡大民  2010/12/26
更新：GBK是描述而不是标准；列出已知编码的命令   胡大民  2011/1/15
增加“?”的GB18030编码
增加编码须知    胡大民  2011/10/19
        
 
目录
字符编码相关专题    1
目录    2
1 前言  1
2 ASCII编码 1
3 UTF-8编码 1
3.1 简介    1
3.2 utf-8的特性 2
3.3 UNICODE和UTF-8  2
4 GBK编码   2
4.1 GB2312  3
4.2 GBK 4
4.3 GB18030总体结构 4
4.4 GBK编码表   4
5 编码须知  6
6 参考资料  6

 
1 前言
如果要查看有哪些已知编码，可以使用Linux下的iconv命令，列出已知编码列表。
iconv --list
介绍一个特性，iconv进行编码转换时，如果输入文件在某个位置出现不合法编码，iconv将停止转换，输出文件也在当前位置截断。
2 ASCII编码
在所有字符集中，最知名的可能要数被称为ASCII的7位字符集了。它是美国信息交换标准代码（American Standard Code for Information Interchange）的缩写，为美国英语通信所设计。它由128个字符组成，包括大小写字母、数字0-9、标点符号、非打印字符（换行符、制表符等4个）以及控制字符（退格、响铃等）组成。

3 UTF-8编码
3.1 简介
UTF-8是UNICODE的一种变长字符编码又称万国码，由Ken Thompson于1992年创建。现在已经标准化为RFC 3629 （取代RFC 2279）。UTF-8用1到6个字节编码UNICODE字符。用在网页上可以同一页面显示中文简体繁体及其它语言(如日文，韩文)。
首先 UCS 和 Unicode 只是分配整数给字符的编码表。有好几种将一串字符表示为一串字节的方法。最显而易见的两种方法是将 Unicode 文本存储为 2 个 或 4 个字节序列的串。 这两种方法的正式名称分别为 UCS-2 和 UCS-4。 除非另外指定， 否则大多数的字节都是这样的(Bigendian convention)。 将一个 ASCII 或 Latin-1 的文件转换成 UCS-2 只需简单地在每个 ASCII 字节前插入 0x00。 如果要转换成 UCS-4， 则必须在每个 ASCII 字节前插入三个 0x00。
在 Unix 下使用 UCS-2 (或 UCS-4) 会导致非常严重的问题。 用这些编码的字符串会包含一些特殊的字符，比如 '\0' 或 '/', 它们在 文件名和其他 C 库函数参数里都有特别的含义。 另外, 大多数使用 ASCII 文件的 UNIX 下的工具， 如果不进行重大修改是无法读取 16 位的字符的。 基于这些原因，在文件名、 文本文件、环境变量等地方, UCS-2 不适合作为 Unicode 的外部编码。
在 ISO 10646-1 Annex R 和 RFC 2279 里定义的 UTF-8 编码没有这些问题。 它是在 Unix 风格的操作系统下使用 Unicode 的明显的方法。
3.2 utf-8的特性
?   UCS 字符 U+0000 到 U+007F (ASCII) 被编码为字节 0x00 到 0x7F (ASCII 兼容)。 这意味着只包含 7 位 ASCII 字符的文件在 ASCII 和 UTF-8 两种编码方式下是一样的。 
?   所有 >U+007F 的 UCS 字符被编码为一个多个字节的串, 每个字节都有标记位集。 因此， ASCII 字节 (0x00-0x7F) 不可能作为任何其他字符的一部分。 
?   表示非 ASCII 字符的多字节串的第一个字节总是在 0xC0 到 0xFD 的范围里， 并指出这个字符包含多少个字节。 多字节串的其余字节都在 0x80 到 0xBF 范围里。 这使得重新同步非常容易, 并使编码无国界, 且很少受丢失字节的影响。 
?   可以编入所有可能的 2^31个 UCS 代码 
?   UTF-8 编码字符理论上可以最多到 6 个字节长, 然而 16 位 BMP 字符最多只用到 3 字节长。 
?   Bigendian UCS-4 字节串的排列顺序是预定的。 
?   字节 0xFE 和 0xFF 在 UTF-8 编码中从未用到。
3.3 UNICODE和UTF-8
下表是UNICODE和UTF-8的对应关系。
UNICODE UTF-8
U-00000000 - U-0000007F:    0xxxxxxx 
U-00000080 - U-000007FF:    110xxxxx 10xxxxxx 
U-00000800 - U-0000FFFF:    1110xxxx 10xxxxxx 10xxxxxx 
U-00010000 - U-001FFFFF:    11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 
U-00200000 - U-03FFFFFF:    111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 
U-04000000 - U-7FFFFFFF:    1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 
utf8的多字节串中，第一个字节的开头"1"的数目就是整个串中字节的数目。
4 GBK编码
GB码，全称是GB2312-80《信息交换用汉字编码字符集 基本集》，1980年发布，是中文信息处理的国家标准，在大陆及海外使用简体中文的地区（如新加坡等）是强制使用的唯一中文编码。P-Windows3.2和苹果OS就是以GB2312为基本汉字编码， Windows 95/98则以GBK为基本汉字编码、但兼容支持GB2312。GB码共收录6763个简体汉字、682个符号，其中汉字部分：一级字3755，以拼音排序，二级字3008，以偏旁排序。该标准的制定和应用为规范、推动中文信息化进程起了很大作用。
GBK编码是中国大陆制订的、等同于UCS的新的中文编码扩展国家标准。GBK工作小组于1995年12月完成GBK规范。该规范基本上采用了原来GB2312-80所有的汉字及码位，并涵盖了原Unicode中所有的汉字20902，总共收录了883个符号， 21003个汉字及提供了1894个造字码位，简、繁体字融于一库。 Microsoft简体版中文Windows 95就是以GBK为内码，又由于GBK同时也涵盖了Unicode所有CJK汉字，所以也可以和Unicode做一一对应。
国家标准GB18030-2000《信息交换用汉字编码字符集基本集的扩充》是我国继GB2312-1980和GB13000-1993之后最重要的汉字编码标准，是我国计算机系统必 须遵循的基础性标准之一。 目前，GB18030有两个版本：GB18030-2000和GB18030-2005。GB18030-2000是GBK的取代版本，它的主要特点是在 GBK基础上增加了CJK统一汉字扩充A的汉字。GB18030-2005的主要特点是在GB18030-2000基础上增加了CJK统一汉字扩充B的汉 字。
GB18030-2000编码标准是由信息产业部和国家质量技术监督局在2000年 3月17日联合发布的，并且将作为一项国家标准在2001年的1月正式强制执行。 
GB18030-2005《信息技术中文编码字符集》是我国自主研制的以汉字为主并包含多种我国少数民族文字（如藏、蒙古、傣、彝、朝鲜、维吾尔文等）的超大型中文编码字符集强制性标准，其中收入汉字70000余个。
4.1 GB2312
区位码：
GB 2312中对所收汉字进行了“分区”处理，每区含有94个汉字/符号。这种表示方式也称为区位码。
01-09区为特殊符号。
16-55区为一级汉字，按拼音排序。
56-87区为二级汉字，按部首/笔画排序。
10-15区及88-94区则未有编码。
举例来说，“啊”字是GB2312之中的第一个汉字，它的区位码就是1601。

字节结构：
在使用GB2312的程序中，通常采用EUC储存方法，以便兼容于ASCII。浏览器编码表上的“GB2312”，通常都是指“EUC-CN”表示法。 
　　每个汉字及符号以两个字节来表示。第一个字节称为“高位字节”（也称“区字节）”，第二个字节称为“低位字节”（也称“位字节”）。 
　　“高位字节”使用了0xA1-0xF7（把01-87区的区号加上0xA0），“低位字节”使 用了0xA1-0xFE（把01-94加上 0xA0）。 由于一级汉字从16区起始，汉字区的“高位字节”的范围是0xB0-0xF7，“低位字节”的范围是0xA1-0xFE，占用的码位是 72*94=6768。其中有5个空位是D7FA-D7FE。
　　例如“啊”字在大多数程序中，会以两个字节，0xB0（第一个字节） 0xA1（第二个字节）储存。区位码=区字节+位字节（与区位码对比：0xB0=0xA0+16,0xA1=0xA0+1）。
4.2 GBK
摘自《GB18030_Summary.pdf》：
GBK是一个描述，而不是一个标准。GB2312、GB13000、GB18030是标准。
4.3 GB18030总体结构
标准采用单字节、双字节和四字节三种方式对字符编码。
单字节部分采用GB/T 11383的编码结构与规则，使用0x00至0x7F码位(对应于ASCII码的相应码位)。
双字节部分，首字节码位从0x81至0xFE，尾字节码位分别是0x40至0x7E和0x80至0xFE。
四字节部分采用GB/T 11383未采用的0x30到0x39作为对双字节编码扩充的后缀，这样扩充的四字节编码，其范围为0x81308130到xFE39FE39。其中第一、三个字节编码码位均为0x81至0xFE，第二、四个字节编码码位均为0x30至0x39。码位总体结构见右图。
例如：“?”的GB18030编码为：0x8231b138。它是GB18030增加的，在GB2312和GBK中没有包含。
4.4 GBK编码表
    
0x00-0x7F   ASCII
    
GBK/2：GB2312非汉字符号 
0xA1A0-0xA1FE   
... 
0xA9A0-0xA9FE   
    
GBK/2:GB2312汉字    
0xB0A1-0xB0FE   
... 
0xBFA1-0xBFFE   
... 
0xEFA1-0xEFFE   
0xF0A1-0xF7FE   
    
GBK/3：扩充汉字 
0x8140-0x817E
0x8180-0x81FE   
... 
0x9040-0x907E
0x9080-0x90FE   
... 
0x9F40-0x9F7E
0x9F80-0x9FFE   
0xA040-0xA07E
0xA080-0xA0FE   
    
GBK/4：扩充汉字 
0xAA40-0xAA7E
0xAA80-0xAAA0   
... 
0xAF40-0xAF7E
0xAF80-0xAFA0   
0xB040-0xB07E
0xB080-0xB0A0   
... 
0xBF40-0xBF7E
0xBF80-0xBFA0   
... 
0xFE40-0xFE7E
0xFE80-0xFEA0   
    
GBK/5：扩充非汉字   
0xA840-0xA87E
0xA880-0xA8A0   
0xA940-0xA97E
0xA980-0xA9A0   
    
    

5 编码须知
1.  记事本保存utf-8编码时，默认是utf-8 BOM
6 参考资料
[1] http://baike.baidu.com/view/742823.htm
[2] http://www.linuxforum.net/books/UTF-8-Unicode.html



