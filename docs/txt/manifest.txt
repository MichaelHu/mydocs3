html标签的manifest属性，指定manifest文件。
<html manifest=”cache-manifest”>

manifest MIME：  text/cache-manifest
格式：
空白行
注释，必须单独一行，以#开头，避免与URL混淆
段头：三种段（section）。CACHE、FALLBACK、NETWORK
段内数据

可能包含多个相同的段，也可能有空段。

HTML5离线应用无法更新的定位与解决，来自腾讯一哥们
http://www.alloyteam.com/2012/01/html5离线应用无法更新的定位与解决/
 
vary: Accept-Encoding很重要
app cache与http cache(browser cache)有关系
Fetch the resource, from the origin of the URL manifest URL, with the synchronous flag set and the manual redirect flag set. If this is an upgrade attempt, then use the newest application cache in cache group as an HTTP cache, and honor HTTP caching semantics (such as expiration, ETags, and so forth) with respect to that cache. User agents may also have other caches in place that are also honored.
If the resource in question is already being downloaded for other reasons then the existing download process can sometimes be used for the purposes of this step, as defined by the fetching algorithm.
An example of a resource that might already be being downloaded is a large image on a Web page that is being seen for the first time. The image would get downloaded to satisfy the img element on the page, as well as being listed in the cache manifest. According to the rules for fetching that image only need be downloaded once, and it can be used both for the cache and for the rendered Web page.

增加vary: Accept-Encoding
http://www.falconhan.com/webanalytics/vary-accept-encoding-header.htm
vary: Accept-Encoding，和代理服务器有关，需要考虑不接受某些编码的浏览器。
针对Apache .htaccess的：将以下代码插入根目录下的.htaccess文件
<IfModule mod_headers.c>
<FilesMatch ".(js|css|xml|gz)$">
Header append Vary Accept-Encoding
</FilesMatch>
</IfModule>


离线应用：http://www.w3.org/TR/html5/，找到5.6 Offline Web applications
cache = window . applicationCache
cache = self . applicationCache
cache . status
cache . update()
cache . abort()
cache . swapCache()
window . navigator . onLine


首先保证manifest文件不被缓存，如果被缓存，那么调试起来将是一场噩梦
其次用JS API提示用户新的版本可用。
window.applicationCache.addEventListener('updateready', function(e) {
  if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
    window.applicationCache.swapCache();
    if (confirm('A new version of this site is available. Load it?')) {
      window.location.reload();
    }
  }
}, false);


