touch events事件
有4个事件：w3c相关，属于Javascript APIs下的Touch Events
touchstart
touchend
touchmove

w3c规范还提供了另外3个事件：touchenter, touchleave, touchcancel
所测试的Android 2.3, iOS4.2都不支持。但这些都支持touchstart, touchmove和touchend事件。但是都还不支持radiusX, radiusY, rotationAngle。

每个触摸事件都包含3个触摸列表：
touches: 当前在屏幕上的手指列表
targetTouches: 在当前DOM对象上的手指列表
changedTouches： 当前事件中涉及的手指列表。例如在touchend事件中，该列表包含了被移走的手指列表。

以上列表由包含触摸信息的对象组成，有如下触摸信息：
identifier: 唯一标识一个触摸的数字
target: 触摸的DOM对象
client/page/screen坐标：触摸点在屏幕上的位置
半径坐标和旋转角度：描述触摸点形状的椭圆。


iScroll使用需要将touchmove事件禁用，常用
document.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);

touchmove与mousemove的区别。前者隐含了touchstart事件，后者不一定隐含mousedown事件。前者肯定是drag，后者不一定是drag。

drag的思想，鼠标或触摸点位置的变化反映到元素位置的变化。deltaX, deltaY的计算。

drag时，offset的值用于修正位置。相减得到offset的两个值具有同样的变化趋势。

计算deltaX和deltaY，可以随意使用以下值，因为我们只要变化值：
clientX视窗的X轴坐标，不包含任何滚动偏移
pageX视窗的X轴坐标，包含滚动偏移
screenX 屏幕的X轴坐标


触摸事件app最佳实践：http://www.html5rocks.com/en/mobile/touch/
1. 阻止缩放，使用viewport meta标签。
<meta name="viewport" 
  content="width=device-width, initial-scale=1.0, user-scalable=no">
2. 阻止滚动，阻止touchmove事件。浏览器默认动作如内容拉完以后的回弹效果等，这些会影响多点触摸应用的体验效果，需要阻止。
document.body.addEventListener('touchmove', function(event) {
  event.preventDefault();
}, false);
使用iscroll也需要阻止touchmove
3. 渲染效率。单指可以直接渲染。多指可以先记录，再启动定时器渲染，以提高渲染效率。如下60fps渲染器。
var touches = []
canvas.addEventListener('touchmove', function(event) {
  touches = event.touches;
}, false);

// Setup a 60fps timer
timer = setInterval(function() {
  renderTouches(touches);
}, 15);
如果现代浏览器支持的话，requestAnimationFrame比setInterval更佳。后者不考虑浏览器的渲染循环（rendering loop）。
function anim(time){
    requestAnimationFrame(anim);
    renderTouches(touches);
}

4. 利用targetTouches和changedTouches，得到更好的控制效果。

触摸APP开发工具：不易在桌面浏览器中直接调试。但也有一些工具，单点触摸，chrome浏览器19版以上可以支持模拟。多点触摸，可以用MacBook的触控板模拟，配合MagicTouch.js的polyfill。

多点触摸的DEMO： http://paulirish.com/demo/multi
http://paulirish.com/demo/这里还有不少其他demo

Magictouch：https://github.com/borismus/MagicTouch.git
关于多点触控的说明和demo。
tracker.html
domdrag.html等
已经部署在本地。

苹果在iOS2.0引入了触摸事件API，Android随后跟上。现在W3C有个工作组负责制定触摸事件的标准。


